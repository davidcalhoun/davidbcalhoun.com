<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webdev on David Calhoun&#39;s blog</title>
    <link>https://www.davidbcalhoun.com/categories/webdev/</link>
    <description>Recent content in webdev on David Calhoun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 08 Jul 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.davidbcalhoun.com/categories/webdev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thursday links (July 8)</title>
      <link>https://www.davidbcalhoun.com/2010/thursday-links-july-8/</link>
      <pubDate>Thu, 08 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/thursday-links-july-8/</guid>
      <description>Mobile YouTube Mobile Gets a Kick Start
Battle of Champions: HTC Droid Incredible vs. Palm Pre Plus
Designing for the Retina Display (326ppi)
AUDIO: John Resig: You Don’t Know Mobile (Webstyle Magazine) – ~$5,000 minimum to do mobile testing
Tapworthy: Designing Great iPhone Apps
eMobile: We have the fastest network in Japan!
Apple iPad User Analysis — Phase II
VIDEO: Using iPhone with a Braille display (Victor Tsaran)
Mobile Access 2010 (Pew Research)</description>
    </item>
    
    <item>
      <title>Using mobile-specific HTML, CSS, and JavaScript (Mobile web part 5)</title>
      <link>https://www.davidbcalhoun.com/2010/using-mobile-specific-html-css-and-javascript-mobile-web-part-5/</link>
      <pubDate>Tue, 29 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/using-mobile-specific-html-css-and-javascript-mobile-web-part-5/</guid>
      <description>(updated June 27, 2011)
Mobile-specific HTML Viewport tag Use the viewport tag to properly fit the content to the screen:
1  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;/&amp;gt;   Tel scheme (to initiate phone calls) 1  &amp;lt;a href=&amp;#34;tel:18005555555&amp;#34;&amp;gt;Call us at 1-800-555-5555&amp;lt;/a&amp;gt;   Sms scheme (to initiate text messages) 1 2 3  &amp;lt;a href=&amp;#34;sms:18005555555&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;sms:18005555555,18005555556&amp;#34;&amp;gt; &amp;lt;!--multiple recipients --&amp;gt; &amp;lt;a href=&amp;#34;sms:18005555555?body=Text%20goes%20here&amp;#34;&amp;gt; &amp;lt;!--predefined message body --&amp;gt;   Disable automatic telephone number linking 1  &amp;lt;meta name=&amp;#34;format-detection&amp;#34; content=&amp;#34;telephone=no&amp;#34;&amp;gt;   iOS-specific HTML (some work on Android as well) You also have access to several Apple-specific tags to use in your iOS applications (iPhone, iPad, and don&#39;t forget the iPod Touch!</description>
    </item>
    
    <item>
      <title>JavaScript SunSpider: HTC Evo versus HTC Incredible versus Nexus One</title>
      <link>https://www.davidbcalhoun.com/2010/javascript-sunspider-htc-evo-versus-htc-incredible-versus-nexus-one/</link>
      <pubDate>Thu, 10 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/javascript-sunspider-htc-evo-versus-htc-incredible-versus-nexus-one/</guid>
      <description>Result table    Test  &amp;lt;td&amp;gt; Evo (2.1) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; Incredible (2.1) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; Nexus One (2.2) &amp;lt;/td&amp;gt;     Total  &amp;lt;td&amp;gt; 16167ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 15237ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 5452ms &amp;lt;/td&amp;gt;     3D  &amp;lt;td&amp;gt; 2014ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1835ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 946ms &amp;lt;/td&amp;gt;     Access  &amp;lt;td&amp;gt; 2126ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1892ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 463ms &amp;lt;/td&amp;gt;     Bitops  &amp;lt;td&amp;gt; 1519ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1591ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 360ms &amp;lt;/td&amp;gt;     Controlflow  &amp;lt;td&amp;gt; 243ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 206ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 20ms &amp;lt;/td&amp;gt;     Crypto  &amp;lt;td&amp;gt; 1033ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1003ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 344ms &amp;lt;/td&amp;gt;     Date  &amp;lt;td&amp;gt; 1849ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1896ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 639ms &amp;lt;/td&amp;gt;     Math  &amp;lt;td&amp;gt; 1684ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1419ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 602ms &amp;lt;/td&amp;gt;     Regexp  &amp;lt;td&amp;gt; 1779ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1673ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 155ms &amp;lt;/td&amp;gt;     String  &amp;lt;td&amp;gt; 3920ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 3722ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 1923ms &amp;lt;/td&amp;gt;    Thoughts The Incredible is just slightly faster than the Evo, to the point where it’s probably negligible or within a margin of error.</description>
    </item>
    
    <item>
      <title>Mobile First: Luke Wroblewski on mobile design</title>
      <link>https://www.davidbcalhoun.com/2010/mobile-first-luke-wroblewski-on-mobile-design/</link>
      <pubDate>Sat, 05 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/mobile-first-luke-wroblewski-on-mobile-design/</guid>
      <description>In episode 6 of The Big Web Show, Luke Wroblewski gives his “Mobile First” talk, explaining his philosophy for designing for mobile, the challenges, and a look at the road ahead. Luke explains that because of the limitations on mobile, developers are forced to really optimize the user experience for mobile. Often times this mobile experience turns out much better than on the desktop, where the “gluttony of resources” results in distracting and excessive webpages.</description>
    </item>
    
    <item>
      <title>Mobile First: Luke Wroblewski on mobile design</title>
      <link>https://www.davidbcalhoun.com/2010/mobile-first-luke-wroblewski-on-mobile-design/</link>
      <pubDate>Sat, 05 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/mobile-first-luke-wroblewski-on-mobile-design/</guid>
      <description>In episode 6 of The Big Web Show, Luke Wroblewski gives his “Mobile First” talk, explaining his philosophy for designing for mobile, the challenges, and a look at the road ahead. Luke explains that because of the limitations on mobile, developers are forced to really optimize the user experience for mobile. Often times this mobile experience turns out much better than on the desktop, where the “gluttony of resources” results in distracting and excessive webpages.</description>
    </item>
    
    <item>
      <title>The viewport metatag (Mobile web part 1)</title>
      <link>https://www.davidbcalhoun.com/2010/the-viewport-metatag-mobile-web-part-1/</link>
      <pubDate>Thu, 06 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/the-viewport-metatag-mobile-web-part-1/</guid>
      <description>The skinny Use this:
1  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;/&amp;gt;   Introduction This series of posts is intended to introduce web developers to basic techniques for designing for the mobile web. It assumes at least a basic knowledge of creating desktop websites.
The problem Ok, so you&#39;ve settled down to learn how to write a website for a mobile device using your current knowledge of building desktop websites. So you start off with some pretty basic HTML:</description>
    </item>
    
    <item>
      <title>Links for the week of February 21, 2010</title>
      <link>https://www.davidbcalhoun.com/2010/links-for-the-week-of-february-21-2010/</link>
      <pubDate>Sun, 28 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/links-for-the-week-of-february-21-2010/</guid>
      <description>General links  Video: Flash performance on the Nexus One   censorzilla   PHP compiler performance &amp;#8211; PHP Classes blog   Mobile  10 Great Tools to Create a Mobile Version of Your Site  </description>
    </item>
    
    <item>
      <title>Links for the week of February 14, 2010</title>
      <link>https://www.davidbcalhoun.com/2010/links-for-the-week-of-february-14-2010/</link>
      <pubDate>Sun, 21 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/links-for-the-week-of-february-14-2010/</guid>
      <description>General links  What really happens when you navigate to a URL &amp;#8211; great in-depth explanation of computer-to-server transactions. With pictures!  (Google) Update on Qualified Developer Program &amp;#8211; some insight into the motivation behind Google&amp;#8217;s Qualified Developer Program   HTML5/CSS3 and new web technology  &amp;lt;ul class=&amp;quot;links&amp;quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;http://www.slideshare.net/madrobby/i-cant-believe-its-not-flash&amp;quot;&amp;gt;I Can&amp;amp;#8217;t Believe It&amp;amp;#8217;s Not Flash: Thomas Fuchs&amp;amp;#8217;s slides from his presentation at Webstock 2010&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;http://designinformer.com/use-css3-now/&amp;quot;&amp;gt;You Can Use CSS3 Right Now&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;http://devsnippets.</description>
    </item>
    
    <item>
      <title>Links for the week of February 7, 2010</title>
      <link>https://www.davidbcalhoun.com/2010/links-for-the-week-of-february-7-2010/</link>
      <pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/links-for-the-week-of-february-7-2010/</guid>
      <description>General links  Video for Everybody!: cross-browser support of HTML5 video and methods of fallback   Oracle Cuts Affect GNOME Accessibility Work: &amp;#8220;&amp;#8230;as a result of the layoffs &amp;#8230; &amp;#8216;the accessibility of the GNOME desktop will become the open source equivalent of an unfunded mandate, doomed ultimately to fail&amp;#8217; &amp;#8230;&amp;#8221;   Google Acquires Aardvark For $50 million   &amp;#8220;the latest publication of HTML5 is now blocked by Adobe, via an objection that has still not been made public (despite yesterday&amp;#8217;s promise to make it so)&amp;#8221;   The iPhone obsession (QuirksMode)   Performance  DOMTiming interface being implemented in Chromium and Firefox   A Hidden Cost of Javascript: file size is a factor in performance, but so is parse and load time   Announcing High Performance JavaScript: Nicholas Zakas announces his latest book, due in March 2010.</description>
    </item>
    
    <item>
      <title>A primer on CSS colors</title>
      <link>https://www.davidbcalhoun.com/2009/a-primer-on-css-colors/</link>
      <pubDate>Tue, 29 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/a-primer-on-css-colors/</guid>
      <description>Color keywords Example usage:
// Example body { color: red; } // Generalization (not actual code) body { color: color_name; } Because color names are easy to remember, they’re handy for getting quick results, especially while doing rapid prototyping.
W3C’s CSS1 recommendation first mentioned 16 color keywords that you can use: aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow:
   Color  &amp;lt;th&amp;gt; Hexadecimal &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Color &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Hexadecimal &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Color &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Hexadecimal &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Color &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Hexadecimal &amp;lt;/th&amp;gt;     aqua / cyan  &amp;lt;td style=&amp;quot;background:#0FF; color:#000; font-family:monospace;&amp;quot;&amp;gt; #00FFFF &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; gray &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#808080; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #808080 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; navy &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#000080; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #000080 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; silver &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#C0C0C0; color:#000; font-family:monospace;&amp;quot;&amp;gt; #C0C0C0 &amp;lt;/td&amp;gt;     black  &amp;lt;td style=&amp;quot;background:#000; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #000000 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; green &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#008000; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #008000 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; olive &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#808000; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #808000 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; teal &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#008080; color:#fff; font-family:monospace;&amp;quot;&amp;gt; #008080 &amp;lt;/td&amp;gt;     blue  &amp;lt;td style=&amp;quot;background:#00F; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #0000FF &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; lime &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#0F0; color:#000; font-family:monospace;&amp;quot;&amp;gt; #00FF00 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; purple &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#800080; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #800080 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; white &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#FFF; color:#000; font-family:monospace;&amp;quot;&amp;gt; #FFFFFF &amp;lt;/td&amp;gt;     fuchsia / magenta  &amp;lt;td style=&amp;quot;background:#F0F; color:#000; font-family:monospace;&amp;quot;&amp;gt; #FF00FF &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; maroon &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#800000; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #800000 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; red &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#F00; color:#FFF; font-family:monospace;&amp;quot;&amp;gt; #FF0000 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; yellow &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;background:#FF0; color:#000; font-family:monospace;&amp;quot;&amp;gt; #FFFF00 &amp;lt;/td&amp;gt;    (color table from Wikipedia)</description>
    </item>
    
    <item>
      <title>PastryKit: digging into an Apple Pie</title>
      <link>https://www.davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie/</link>
      <pubDate>Wed, 16 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie/</guid>
      <description>Yesterday John Gruber wrote about Apple’s PastryKit, iPhone’s JavaScript framework that’s been discovered “in the wild” on the iPhone user guide at http://help.apple.com/iphone/3/mobile/. There’s a few ways to access the page:
 with an actual iPhone or iTouch by browsing with an iPhone/iTouch user agent. If you’re using Safari, enable the Developer menu in Safari&amp;gt;Preferences&amp;gt;Advanced and switching user agents by clicking on Develope&amp;gt;User Agent  What’s all the big fuss? John was particularly interested in the responsiveness and native-like interaction of flinging through long lists, the fact the address bar is completely hidden, and the possibility of having a toolbar fixed to the top of the page.</description>
    </item>
    
    <item>
      <title>JavaScript tidbit: special variables ($, $$, _, etc)</title>
      <link>https://www.davidbcalhoun.com/2009/javascript-tidbit-special-variables-_-etc/</link>
      <pubDate>Tue, 08 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/javascript-tidbit-special-variables-_-etc/</guid>
      <description>You&#39;re probably used to typical variables names such as the following:
1  var personName = &amp;#39;Joe&amp;#39;;   You may not realize it, but there are some non-alphanumeric variables at your disposal.
Using $ For instance, the $ variable has been made popular by several JavaScript libraries, most notably jQuery. You can use it to alias operations that are commonly performed, such as the following (1):
1 2  var $ = document.</description>
    </item>
    
    <item>
      <title>IEMobile 6/7 bug: classes and id not supported on the HTML element</title>
      <link>https://www.davidbcalhoun.com/2009/iemobile-6/7-bug-classes-and-id-not-supported-on-the-html-element/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/iemobile-6/7-bug-classes-and-id-not-supported-on-the-html-element/</guid>
      <description>As it turns out, IEMobile 6/7 (and presumably anything earlier) doesn’t support classes and ids that are attached to the HTML element. I confirmed this on both IEMobile 6 and 7. Fortunately it looks to be fixed in IEMobile 8 (which makes sense, since it works fine in desktop IE6, which it’s based on).
The consequence of this is that adding an id/class to the html tag will result in the style not being applied to the document:</description>
    </item>
    
    <item>
      <title>IEMobile 6/7 bug: classes and id not supported on the HTML element</title>
      <link>https://www.davidbcalhoun.com/2009/iemobile-6/7-bug-classes-and-id-not-supported-on-the-html-element/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/iemobile-6/7-bug-classes-and-id-not-supported-on-the-html-element/</guid>
      <description>As it turns out, IEMobile 6/7 (and presumably anything earlier) doesn’t support classes and ids that are attached to the HTML element. I confirmed this on both IEMobile 6 and 7. Fortunately it looks to be fixed in IEMobile 8 (which makes sense, since it works fine in desktop IE6, which it’s based on).
The consequence of this is that adding an id/class to the html tag will result in the style not being applied to the document:</description>
    </item>
    
    <item>
      <title>PHP: dealing with stuff that doesn&#39;t exist</title>
      <link>https://www.davidbcalhoun.com/2009/php-dealing-with-stuff-that-doesnt-exist/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/php-dealing-with-stuff-that-doesnt-exist/</guid>
      <description>Introduction As the application you’re coding becomes more and more complex, there’s more of an opportunity for things to go wrong in all sorts of unforseen ways. One of these problems is variables or functions that don’t exist. The problem is when you code in such a way that you presuppose their existence. But their existence isn’t guaranteed!
A simple case of this happening is when you’re dealing with user input.</description>
    </item>
    
    <item>
      <title>Pitfalls of declaring variables in JavaScript</title>
      <link>https://www.davidbcalhoun.com/2009/pitfalls-of-declaring-variables-in-javascript/</link>
      <pubDate>Wed, 18 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/pitfalls-of-declaring-variables-in-javascript/</guid>
      <description>Introduction One of the things that’s always been confusing to me is that there are multiple ways to declare variables in JavaScript, and some ways are better than others. For the beginner programmer, just getting to code to work means complete success, but for the intermediate or advanced programmer, this is just the first step. The next step is to clean up the code and make sure everything is written in the best way it could have been written.</description>
    </item>
    
    <item>
      <title>JavaScript Tidbit: Block scope with let</title>
      <link>https://www.davidbcalhoun.com/2009/javascript-tidbit-block-scope-with-let/</link>
      <pubDate>Tue, 15 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/javascript-tidbit-block-scope-with-let/</guid>
      <description>JavaScript has functional scope. Meaning that if you (properly) define variables within functions, those variables remain accessible only inside the function.
Block scope, on the other hand, defines scope within a block of code, usually defined by braces. JavaScript now has block scope as of version 1.7, which means it’s available in these browsers:
 Firefox 2+  Block scope is enabled in JavaScript with the use of “let”:
let(x=100) { alert(x); }; It also works perfectly well on one line, without the use of braces:</description>
    </item>
    
    <item>
      <title>JavaScript Tidbit: Shorthand Object Instantiation</title>
      <link>https://www.davidbcalhoun.com/2009/javascript-tidbit-shorthand-object-instantiation/</link>
      <pubDate>Mon, 14 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/javascript-tidbit-shorthand-object-instantiation/</guid>
      <description>The skinny: here’s a neat little trick to reduce the amount of code users have to type to instantiate objects:
function jQuery(str, con){ if ( window == this ) return new jQuery(str, con); // ... } new jQuery(&amp;quot;#foo&amp;quot;); // this is now equivalent... jQuery(&amp;quot;#foo&amp;quot;); // ...to this!  {:lang=&amp;quot;js&amp;rdquo;}
Explanation: when jQuery(“#foo”) is typed, the function first determines if the context in which it’s being called is the global object (window).</description>
    </item>
    
    <item>
      <title>PHP Tidbit: Dead simple singleton</title>
      <link>https://www.davidbcalhoun.com/2009/php-tidbit-dead-simple-singleton/</link>
      <pubDate>Mon, 14 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/php-tidbit-dead-simple-singleton/</guid>
      <description>class Singleton {private static $instance;public static function getInstance() {if(!isset(self::$instance)) {$c = __CLASS__;self::$instance = new $c();}return self::$instance;}}And the explanation…
class Singleton {private static $instance; // static variable to hold our 1 instancepublic static function getInstance() { // function to get the 1 instanceif(!isset(self::$instance)) { // this will only run once (and instantiate once)$c = __CLASS__; // get the class (Singleton)self::$instance = new $c(); // instantiate the class and store it in our variable}return self::$instance; // return the instance}public static function myFunction() { // we can get to this through Singleton::getInstance()-myFunction()// .</description>
    </item>
    
  </channel>
</rss>