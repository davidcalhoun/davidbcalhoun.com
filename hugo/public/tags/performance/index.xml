<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on David Calhoun&#39;s blog</title>
    <link>https://davidbcalhoun.com/tags/performance/</link>
    <description>Recent content in Performance on David Calhoun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 14 Oct 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://davidbcalhoun.com/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS5 SunSpider: iPhone 4S vs iPhone 4 vs iPhone 3GS</title>
      <link>https://davidbcalhoun.com/2011/ios5-sunspider-iphone-4s-vs-iphone-4-vs-iphone-3gs/</link>
      <pubDate>Fri, 14 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2011/ios5-sunspider-iphone-4s-vs-iphone-4-vs-iphone-3gs/</guid>
      <description>Result table (SunSpider 0.9.1, all devices running iOS 5)   Test   iPhone 4S   iPhone 4   iPhone 3GS     Total  2270ms   3483ms   4903ms     3D  281ms   486ms   672ms     Access  279ms   410ms   614ms     Bitops  177ms   200ms   270ms     Controlflow  20ms   26ms   34ms     Crypto  164ms   211ms   315ms     Date  332ms   528ms   770ms     Math  219ms   433ms   553ms     Regexp  88ms   117ms   151ms     String  711ms   1072ms   1525ms    Raw results iPhone 4S (iOS5)</description>
    </item>
    
    <item>
      <title>Mobile Performance Manifesto</title>
      <link>https://davidbcalhoun.com/2011/mobile-performance-manifesto/</link>
      <pubDate>Tue, 11 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2011/mobile-performance-manifesto/</guid>
      <description>Earlier this year I gave a talk (slides) outlining the latest and greatest in mobile performance, including a bit of my own unscientific research into carrier latency and bandwidth thanks to boomerang.js.
I realized that interest in mobile performance has exploded recently, especially with Steve Souders announcing his focus on mobile, and I thought it was time for an update, this time in blog form. Also, my old slides have been somewhat embarrassing.</description>
    </item>
    
    <item>
      <title>When to base64 encode images (and when not to)</title>
      <link>https://davidbcalhoun.com/2011/when-to-base64-encode-images-and-when-not-to/</link>
      <pubDate>Sun, 28 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2011/when-to-base64-encode-images-and-when-not-to/</guid>
      <description>Introduction Ever since Steve Souders started evangelizing web performance, it&amp;rsquo;s been pounded into our heads that extra HTTP requests add a lot of additional overhead, and that we should combine them if possible to dramatically decrease the load time of our web pages.
The practical implication of this has been to combine our JavaScript and CSS files, which is relatively easy and straightforward, but the harder question has been what to do with images.</description>
    </item>
    
    <item>
      <title>JavaScript SunSpider benchmark: iOS 4.3 vs iOS 4.0</title>
      <link>https://davidbcalhoun.com/2011/javascript-sunspider-benchmark-ios-4.3-vs-ios-4.0/</link>
      <pubDate>Sat, 22 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2011/javascript-sunspider-benchmark-ios-4.3-vs-ios-4.0/</guid>
      <description>Result table (SunSpider 0.9.1)    Test   iOS 4 (3GS)   iOS 4.3 beta 2 (3GS)   % change     Total   13787ms  5357ms  -61.1%     3D   1917ms  737ms  -61.6%     Access   1893ms  617ms  -67.4%     Bitops   1239ms  289ms  -76.</description>
    </item>
    
    <item>
      <title>BlackBerry Torch SunSpider results (JavaScript benchmark)</title>
      <link>https://davidbcalhoun.com/2010/blackberry-torch-sunspider-results-javascript-benchmark/</link>
      <pubDate>Wed, 18 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2010/blackberry-torch-sunspider-results-javascript-benchmark/</guid>
      <description>Results ============================================ RESULTS (means and 95% confidence intervals) -------------------------------------------- Total: 322.2ms +/- 4.9% -------------------------------------------- 3d: 55.0ms +/- 15.3% cube: 19.8ms +/- 12.1% morph: 16.6ms +/- 35.8% raytrace: 18.6ms +/- 22.5% access: 32.8ms +/- 12.4% binary-trees: 1.8ms +/- 30.9% fannkuch: 14.2ms +/- 7.3% nbody: 12.6ms +/- 26.7% nsieve: 4.2ms +/- 24.8% bitops: 29.4ms +/- 10.2% 3bit-bits-in-byte: 2.4ms +/- 28.4% bits-in-byte: 8.0ms +/- 15.5% bitwise-and: 8.6ms +/- 21.9% nsieve-bits: 10.4ms +/- 21.</description>
    </item>
    
    <item>
      <title>Is a hash faster than a Switch in JavaScript?</title>
      <link>https://davidbcalhoun.com/2010/is-a-hash-faster-than-a-switch-in-javascript/</link>
      <pubDate>Tue, 17 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2010/is-a-hash-faster-than-a-switch-in-javascript/</guid>
      <description>I stumbled across this concept recently and I thought I&amp;rsquo;d share it, because I don&amp;rsquo;t generally see this pattern being used. More importantly, I also share test results that show that maybe it&amp;rsquo;s not always a good idea to use this pattern&amp;hellip;
The problem with Switch statements The basic switch statement in JavaScript looks something like this:
var foo = &#39;c&#39;; switch(foo) { case &#39;a&#39;: break; case &#39;b&#39;: break; case &#39;c&#39;: break; default: }  So what&amp;rsquo;s wrong with this?</description>
    </item>
    
    <item>
      <title>iPhone 4 SunSpider test results (22% faster than iPhone 3GS)</title>
      <link>https://davidbcalhoun.com/2010/iphone-4-sunspider-test-results-22-faster-than-iphone-3gs/</link>
      <pubDate>Fri, 25 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2010/iphone-4-sunspider-test-results-22-faster-than-iphone-3gs/</guid>
      <description>============================================ RESULTS (means and 95% confidence intervals) -------------------------------------------- Total: 10669.4ms +/- 1.0% -------------------------------------------- 3d: 1471.5ms +/- 2.1% cube: 428.7ms +/- 2.6% morph: 584.3ms +/- 4.7% raytrace: 458.5ms +/- 0.6% access: 1476.7ms +/- 1.3% binary-trees: 151.6ms +/- 1.3% fannkuch: 664.0ms +/- 0.1% nbody: 397.9ms +/- 2.1% nsieve: 263.2ms +/- 6.3% bitops: 947.2ms +/- 2.1% 3bit-bits-in-byte: 195.7ms +/- 2.0% bits-in-byte: 206.1ms +/- 1.0% bitwise-and: 179.7ms +/- 1.1% nsieve-bits: 365.7ms +/- 3.9% controlflow: 169.</description>
    </item>
    
    <item>
      <title>JavaScript SunSpider test: iOS 3.1.3 versus iOS 4 GM</title>
      <link>https://davidbcalhoun.com/2010/javascript-sunspider-test-ios-3.1.3-versus-ios-4-gm/</link>
      <pubDate>Thu, 10 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2010/javascript-sunspider-test-ios-3.1.3-versus-ios-4-gm/</guid>
      <description>Result table    Test   iOS 3.1.3 (3GS)   iOS 4 GM (3GS)   % change     Total   15396ms   13787ms  -10.5%     3D   2411ms   1917ms  -20.5%     Access   1884ms   1893ms  +0.5%     Bitops   1044ms   1239ms  +18.</description>
    </item>
    
    <item>
      <title>Video: John Resig - Testing, Performance Analysis, and jQuery 1.4</title>
      <link>https://davidbcalhoun.com/2009/video-john-resig---testing-performance-analysis-and-jquery-1.4/</link>
      <pubDate>Mon, 21 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://davidbcalhoun.com/2009/video-john-resig---testing-performance-analysis-and-jquery-1.4/</guid>
      <description>In case you hadn&amp;#8217;t seen it yet, John Resig was kind enough to stop by Yahoo! for the December Bayjax meetup. Here&amp;#8217;s the video:
 Usually developers are more interested in just getting the dang code to work, and as a result actual the testing and maintenance of JavaScript isn&amp;#8217;t talked about too much, so I&amp;#8217;m sure this will be new territory for many developers. And since it&amp;#8217;s John Resig speaking, there was of course a bit about using TestSwarm, a testing distributed framework-agnostic automated testing tool (that&amp;#8217;s a mouthful!</description>
    </item>
    
  </channel>
</rss>