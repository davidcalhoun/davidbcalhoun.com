<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on David Calhoun&#39;s blog</title>
    <link>https://www.davidbcalhoun.com/categories/javascript/</link>
    <description>Recent content in javascript on David Calhoun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 29 Jun 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.davidbcalhoun.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using mobile-specific HTML, CSS, and JavaScript (Mobile web part 5)</title>
      <link>https://www.davidbcalhoun.com/2010/using-mobile-specific-html-css-and-javascript-mobile-web-part-5/</link>
      <pubDate>Tue, 29 Jun 2010 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2010/using-mobile-specific-html-css-and-javascript-mobile-web-part-5/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ (updated June 27, 2011)&#xA;Mobile-specific HTML Viewport tag Use the viewport tag to properly fit the content to the screen:&#xA;1 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; Tel scheme (to initiate phone calls) 1 &amp;lt;a href=&amp;#34;tel:18005555555&amp;#34;&amp;gt;Call us at 1-800-555-5555&amp;lt;/a&amp;gt; Sms scheme (to initiate text messages) 1 2 3 4 5 6 7 8 &amp;lt;a href=&amp;#34;sms:18005555555&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;sms:18005555555,18005555556&amp;#34;&amp;gt; &amp;lt;!</description>
    </item>
    <item>
      <title>JavaScript SunSpider: HTC Evo versus HTC Incredible versus Nexus One</title>
      <link>https://www.davidbcalhoun.com/2010/javascript-sunspider-htc-evo-versus-htc-incredible-versus-nexus-one/</link>
      <pubDate>Thu, 10 Jun 2010 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2010/javascript-sunspider-htc-evo-versus-htc-incredible-versus-nexus-one/</guid>
      <description>Result table Test &amp;lt;td&amp;gt; Evo (2.1) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; Incredible (2.1) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; Nexus One (2.2) &amp;lt;/td&amp;gt; Total &amp;lt;td&amp;gt; 16167ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 15237ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 5452ms &amp;lt;/td&amp;gt; 3D &amp;lt;td&amp;gt; 2014ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1835ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 946ms &amp;lt;/td&amp;gt; Access &amp;lt;td&amp;gt; 2126ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1892ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 463ms &amp;lt;/td&amp;gt; Bitops &amp;lt;td&amp;gt; 1519ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1591ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 360ms &amp;lt;/td&amp;gt; Controlflow &amp;lt;td&amp;gt; 243ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 206ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 20ms &amp;lt;/td&amp;gt; Crypto &amp;lt;td&amp;gt; 1033ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1003ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 344ms &amp;lt;/td&amp;gt; Date &amp;lt;td&amp;gt; 1849ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1896ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 639ms &amp;lt;/td&amp;gt; Math &amp;lt;td&amp;gt; 1684ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1419ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 602ms &amp;lt;/td&amp;gt; Regexp &amp;lt;td&amp;gt; 1779ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1673ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 155ms &amp;lt;/td&amp;gt; String &amp;lt;td&amp;gt; 3920ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 3722ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 1923ms &amp;lt;/td&amp;gt; Thoughts The Incredible is just slightly faster than the Evo, to the point where it’s probably negligible or within a margin of error.</description>
    </item>
    <item>
      <title>PastryKit: digging into an Apple Pie</title>
      <link>https://www.davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie/</link>
      <pubDate>Wed, 16 Dec 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ Yesterday John Gruber wrote about Apple’s PastryKit, iPhone’s JavaScript framework that’s been discovered “in the wild” on the iPhone user guide at http://help.apple.com/iphone/3/mobile/. There’s a few ways to access the page:&#xA;with an actual iPhone or iTouch by browsing with an iPhone/iTouch user agent. If you’re using Safari, enable the Developer menu in Safari&amp;gt;Preferences&amp;gt;Advanced and switching user agents by clicking on Develope&amp;gt;User Agent What’s all the big fuss?</description>
    </item>
    <item>
      <title>JavaScript tidbit: special variables ($, $$, _, etc)</title>
      <link>https://www.davidbcalhoun.com/2009/javascript-tidbit-special-variables-_-etc/</link>
      <pubDate>Tue, 08 Dec 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/javascript-tidbit-special-variables-_-etc/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ You&amp;rsquo;re probably used to typical variables names such as the following:&#xA;1 var personName = &amp;#34;Joe&amp;#34;; You may not realize it, but there are some non-alphanumeric variables at your disposal.&#xA;Using $ For instance, the $ variable has been made popular by several JavaScript libraries, most notably jQuery. You can use it to alias operations that are commonly performed, such as the following (1):</description>
    </item>
    <item>
      <title>Pitfalls of declaring variables in JavaScript</title>
      <link>https://www.davidbcalhoun.com/2009/pitfalls-of-declaring-variables-in-javascript/</link>
      <pubDate>Wed, 18 Nov 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/pitfalls-of-declaring-variables-in-javascript/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ Introduction One of the things that’s always been confusing to me is that there are multiple ways to declare variables in JavaScript, and some ways are better than others. For the beginner programmer, just getting to code to work means complete success, but for the intermediate or advanced programmer, this is just the first step.</description>
    </item>
    <item>
      <title>JavaScript Tidbit: Block scope with let</title>
      <link>https://www.davidbcalhoun.com/2009/javascript-tidbit-block-scope-with-let/</link>
      <pubDate>Tue, 15 Sep 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/javascript-tidbit-block-scope-with-let/</guid>
      <description>JavaScript has functional scope. Meaning that if you (properly) define variables within functions, those variables remain accessible only inside the function.&#xA;Block scope, on the other hand, defines scope within a block of code, usually defined by braces. JavaScript now has block scope as of version 1.7, which means it’s available in these browsers:&#xA;Firefox 2+ Block scope is enabled in JavaScript with the use of “let”:&#xA;let(x=100) { alert(x); }; It also works perfectly well on one line, without the use of braces:</description>
    </item>
    <item>
      <title>JavaScript Tidbit: Shorthand Object Instantiation</title>
      <link>https://www.davidbcalhoun.com/2009/javascript-tidbit-shorthand-object-instantiation/</link>
      <pubDate>Mon, 14 Sep 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/javascript-tidbit-shorthand-object-instantiation/</guid>
      <description>The skinny: here’s a neat little trick to reduce the amount of code users have to type to instantiate objects:&#xA;function jQuery(str, con){ if ( window == this ) return new jQuery(str, con); // ... } new jQuery(&amp;quot;#foo&amp;quot;); // this is now equivalent... jQuery(&amp;quot;#foo&amp;quot;); // ...to this! {:lang=&amp;ldquo;js&amp;rdquo;}&#xA;Explanation: when jQuery(“#foo”) is typed, the function first determines if the context in which it’s being called is the global object (window). If it is, it returns an instantiation of itself.</description>
    </item>
  </channel>
</rss>
