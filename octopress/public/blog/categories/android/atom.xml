<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | David Calhoun]]></title>
  <link href="http://davidbcalhoun.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://davidbcalhoun.com/"/>
  <updated>2017-01-11T23:41:00-08:00</updated>
  <id>http://davidbcalhoun.com/</id>
  <author>
    <name><![CDATA[David Calhoun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android 3.0 Honeycomb is first to implement the Device API]]></title>
    <link href="http://davidbcalhoun.com/2011/android-3-0-honeycomb-is-first-to-implement-the-device-api"/>
    <updated>2011-02-24T00:00:00-08:00</updated>
    <id>http://davidbcalhoun.com/2011/android-3-0-honeycomb-is-first-to-implement-the-device-api</id>
    <content type="html"><![CDATA[<p>I fired up the newly released Android 3.0 SDK to run some tests and found they’ve implemented part of the long-awaited <a href="http://www.w3.org/2009/dap/">Device API</a> (aka the Media Capture API). From your browser you can now upload pictures and videos from the camera as well as sounds from the microphone. The returned data should be available to manipulate via the <a href="http://www.w3.org/TR/FileAPI/">File API</a> (although I haven’t yet tested this).</p>

<p>I made a <a href="http://www.youtube.com/watch?v=L1XqvLOi-3I">short video demo</a> with some explanation:</p>

<p>Here’s the code so you can play around with it for yourself!</p>

<pre><code class="language-html">&lt;form enctype="multipart/form-data" method="post"&gt;
  &lt;h2&gt;Regular file upload&lt;/h2&gt;
  &lt;input type="file"&gt;&lt;/input&gt;
  
  &lt;h2&gt;capture=camera&lt;/h2&gt;
  &lt;input type="file" accept="image/*;capture=camera"&gt;&lt;/input&gt;
  
  &lt;h2&gt;capture=camcorder&lt;/h2&gt;
  &lt;input type="file" accept="video/*;capture=camcorder"&gt;&lt;/input&gt;
  
  &lt;h2&gt;capture=microphone&lt;/h2&gt;
  &lt;input type="file" accept="audio/*;capture=microphone"&gt;&lt;/input&gt;
&lt;/form&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing based on connection speed: using navigator.connection on Android 2.2+]]></title>
    <link href="http://davidbcalhoun.com/2010/using-navigator-connection-android"/>
    <updated>2010-09-14T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2010/using-navigator-connection-android</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>A little while back <a href="http://www.mobilexweb.com/blog/android-froyo-html5-accelerometer-flash-player">this post</a> made the rounds, which took us on a journey through some of the new features introduced in the browser in Android 2.2 Froyo. Among the most overlooked features are the file upload functionality (you can upload photos from your browser now! But we’re still waiting on iPhone to support this…) and a little-known JavaScript addition to the Browser Object Model (BOM) in the form of</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          navigator.connection
        </div>
      </td>
    </tr>
  </table>
</div>

<p>. Let’s take a peek at its contents:</p>

<pre name="code" class="JScript">// contents of navigator.connection object
{
  "type": "3",
  "UNKNOWN": "0",
  "ETHERNET": "1",
  "WIFI": "2",
  "CELL_2G": "3",
  "CELL_3G": "4"
}
</pre>

<p>This is data taken from a Nexus One running on a 2G network, so you can see that the type is set to 3, which corresponds with “CELL_2G”. In other words, this phone runs on a slower network, so from a performance perspective, you probably want to consider delivering a lower-bandwidth experience.</p>

<p>So how exactly do we target this?</p>

<h3 id="the-code">The code</h3>

<p>The purpose of this code is to first find the connection speed, and then add a class to the</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          html
        </div>
      </td>
    </tr>
  </table>
</div>

<p>element based on this connection. The goal is to be able to target these connections with CSS, so the right content is delivered to the right connection:</p>

<pre name="code" class="CSS">.highbandwidth .logo   { background-image:url('logo-high.jpg'); }
.mediumbandwidth .logo { background-image:url('logo-medium.jpg'); }
.lowbandwidth .logo    { background-image:url('logo-low.jpg'); }
</pre>

<p>And here’s the JavaScript:</p>

<pre name="code" class="JScript">var connection, connectionSpeed, htmlNode, htmlClass;

// create a custom object if navigator.connection isn't available
connection = navigator.connection || {'type':'0'};

// set connectionSpeed
switch(connection.type) {
  case connection.CELL_3G:
    // 3G
    connectionSpeed = 'mediumbandwidth';
  break;
  case connection.CELL_2G:
    // 2G
    connectionSpeed = 'lowbandwidth';
  break;
  default:
    // WIFI, ETHERNET, UNKNOWN
    connectionSpeed = 'highbandwidth';
}

// set the connection speed on the html element, i.e. &lt;html class="lowbandwidth"&gt;
htmlNode = document.body.parentNode;
htmlClass = htmlNode.getAttribute('class') || '';
htmlNode.setAttribute('class', htmlClass + ' ' + connectionSpeed);
</pre>

<h3 id="give-the-user-control">Give the user control!</h3>

<p>Just as it’s a good practice to give the user a link to the full desktop version of the website, if you’re going to deliver different content based on different connection speeds, then it’s highly advisable to give the user full control.</p>

<p>So give them control! You can provide something like the following:</p>

<div id="bandwidthControls">
  <p>
    Mobile | <a href="#">Desktop</a>
  </p>
  
  <p>
    Bandwidth: <a href="#">High</a> | <a href="#">Medium</a> | Low
  </p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install obsolete Android Virtual Devices (AVDs)]]></title>
    <link href="http://davidbcalhoun.com/2010/how-to-install-obsolete-android-virtual-devices-avds"/>
    <updated>2010-06-09T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2010/how-to-install-obsolete-android-virtual-devices-avds</id>
    <content type="html"><![CDATA[<p>Apparently it’s no longer possible to easily download Android versions 2.0 and 2.0.1 from the AVD Manager. I noticed this problem when I got a new machine and had to install everything from scratch. In the future I suspect even more AVDs will be made obsolete, so this solution also applies to them.</p>

<p>Why would you want to install obsolete AVDs? In my case it’s a matter of research: I simply want to see the progress of features being added to its browser, and track those changes over time.</p>

<h3 id="step-1-manually-download-and-inspect-repositoryxml">Step 1: Manually download and inspect repository.xml</h3>

<p>When updating from “Available Packages” there’s a little one-line error saying “Some packages were found but are not compatible updates.”</p>

<p>Ok, so let’s check out the XML for ourselves to see if we can find anything. So point your browser to <a href="https://dl-ssl.google.com/android/repository/repository.xml">https://dl-ssl.google.com/android/repository/repository.xml</a> (to see the XML, right click to view the page source if you’re using a Webkit-based browser).</p>

<p>Search for the AVD version you want. In this case we want 2.0 and 2.0.1, so a simple search find the relevant blocks of code. And we also find the XML tag that’s the cause of our troubles, which prevents us from easily getting the AVDs:</p>

<pre name="code" class="xml">&lt;sdk:obsolete /&gt;
</pre>

<h3 id="step-2-get-the-avds">Step 2: Get the AVDs!</h3>

<p>At this point you could do two things, either save repository.xml to your computer and remove these “obsolete” tags (then add the XML to your AVD Manager by clicking “Add Add-on Site…”), or simply find the path to the AVD and download it manually.</p>

<p>The second option is to simply manually download the paths, which are easy to find in the XML and are listed here for your convenience:  <br />
<a href="https://dl-ssl.google.com/android/repository/android-2.0_r01-linux.zip">Android 2.0 AVD (Linux)</a>  <br />
<a href="https://dl-ssl.google.com/android/repository/android-2.0_r01-macosx.zip">Android 2.0 AVD (Mac OSX)</a>  <br />
<a href="https://dl-ssl.google.com/android/repository/android-2.0_r01-windows.zip">Android 2.0 AVD (Windows)</a></p>

<p><a href="https://dl-ssl.google.com/android/repository/android-2.0.1_r01-linux.zip">Android 2.0.1 AVD (Linux)</a>  <br />
<a href="https://dl-ssl.google.com/android/repository/android-2.0.1_r01-macosx.zip">Android 2.0.1 AVD (Mac OSX)</a>  <br />
<a href="https://dl-ssl.google.com/android/repository/android-2.0.1_r01-windows.zip">Android 2.0.1 AVD (Windows)</a></p>

<h3 id="step-3-install">Step 3: Install!</h3>

<p>Create directories under your Android SDK installation’s “platforms” folder. In this case we have 2.0 (API level 5) and 2.0.1 (API level 6), so I created these folders: android-5 and android-6. Now just unzip the contents into these folders.</p>

<p>Start up the AVD Manager and click on “Installed Packages”. If you don’t see your new (obsolete) packages you just installed, hit the Refresh button and you should see them.</p>

<p>Now you can create new AVDs with these obsolete packages!</p>

]]></content>
  </entry>
  
</feed>
