<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webdev | David Calhoun]]></title>
  <link href="http://davidbcalhoun.com/blog/categories/webdev/atom.xml" rel="self"/>
  <link href="http://davidbcalhoun.com/"/>
  <updated>2018-07-04T17:23:39-07:00</updated>
  <id>http://davidbcalhoun.com/</id>
  <author>
    <name><![CDATA[David Calhoun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A simple introduction to JavaScript map() and reduce() (Array helper functions)]]></title>
    <link href="http://davidbcalhoun.com/2018/a-simple-introduction-to-javascript-map-and-reduce-array-helper-functions/"/>
    <updated>2018-07-04T16:39:53-07:00</updated>
    <id>http://davidbcalhoun.com/2018/a-simple-introduction-to-javascript-map-and-reduce-array-helper-functions</id>
    <content type="html"><![CDATA[<h2 id="first-steps-with-for-loops">First steps with <code>for</code> loops</h2>
<p>Most folks find <code>for</code> loops powerful enough to achieve all they need when they need to process items in an <code>Array</code>.  For example, say we have a simple list of items:</p>

<pre><code class="language-javascript">const beatles = [
	'John Lennon',
	'Paul McCartney',
	'George Harrison',
	'Ringo Starr'
];
</code></pre>

<p>Let’s say that we want to display all these names in a Markdown list, which means we simply need to prefix each item with an asterisk and a space, e.g. <code>* John Lennon</code>.</p>

<p>Ok!  Seems easy enough.  Let’s see how we’d do this with a loop:</p>

<pre><code class="language-javascript">const beatles = [
	'John Lennon',
	'Paul McCartney',
	'George Harrison',
	'Ringo Starr'
];

let beatlesMarkdown = [];
for (let index = 0; index &lt; beatles.length; index++) {
	beatlesMarkdown.push(`* ${ beatles[index] }`);
}
</code></pre>

<p>Here’s the resulting array, which we’ve put into <code>beatlesMarkdown</code>:</p>

<pre><code class="language-javascript">[
	'* John Lennon',
	'* Paul McCartney',
	'* George Harrison',
	'* Ringo Starr'
]
</code></pre>

<p>(note the extra line break at the end, which isn’t too big of a deal in this case, but could be annoying for other use cases)</p>

<h2 id="map">map()</h2>

<h2 id="reduce">reduce()</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[async.parallel with a simple timeout (node.js)]]></title>
    <link href="http://davidbcalhoun.com/2014/async.parallel-with-a-simple-timeout-node-js/"/>
    <updated>2014-09-08T00:36:52-07:00</updated>
    <id>http://davidbcalhoun.com/2014/async.parallel-with-a-simple-timeout-node-js</id>
    <content type="html"><![CDATA[<p>A while back I had a need for a general timeout option for async.parallel and was surprised I couldn’t find much information about how to do it.  I was using async.parallel to make a lot of REST calls in parallel, but one of them was getting blocked by a firewall, resulting in an eventual timeout minutes later.</p>

<p>One option was to specify a shorter timeout for each individual REST call, including the one causing the problem.  But I wanted a simpler solution: a general timeout for that specific async.parallel instance that made it clear all tasks should finish within a certain period of time. Otherwise return a timeout as an error, allowing the program to continue (and retry if necessary).</p>

<p>It was somewhat surprising there wasn’t an option built into async.parallel, as I could imagine other folks must have had the same problem at some point in time.</p>

<p>In any case, I wrote a pretty simple wrapper function that gets the job done (see example usage below):</p>

<pre><code class="language-javascript">	var async = require('async');

	// async.parallel with optional timeout (options.timeoutMS)
	function parallel(options, tasks, cb) {
		//  sanity checks
		options = options || {};

		// no timeout wrapper; passthrough to async.parallel
		if(typeof options.timeoutMS != 'number') return async.parallel(tasks, cb);

		var timeout = setTimeout(function(){
			// remove timeout, so we'll know we already erred out
			timeout = null;

			// error out
			cb('async.parallel timed out out after ' + options.timeoutMS + 'ms.', null);
		}, options.timeoutMS);

		async.parallel(tasks, function(err, result){
			// after all tasks are complete

			// noop if timeout was called and annulled
			if(!timeout) return;

			// cancel timeout (if timeout was set longer, and all parallel tasks finished sooner)
			clearTimeout(timeout);

			// passthrough the data to the cb
			cb(err, result);
		});
	}


	// example usage
	parallel({timeoutMS: 10000}, [  // 10 second timeout
		function(){ ... },
		function(){ ... }
	],
	function(err, results) {
		if(err) {
			// timeouts can now be handled here
		}
	});


	// an example forcing a timeout to occur
	parallel({
		timeoutMS: 1000   // 1 second timeout
	},
	[
		function(done){
			// task 1 completes in 100ms
			setTimeout(function(){
				done(null, 'foo');
			}, 100);
		},
		function(done){
			// task 2 completes in 2000ms, forcing a timeout error
			setTimeout(function(){
				done(null, 'bar');
			}, 2000);
		}
	],
	function(err, results) {
		// err = 'async.parallel timed out out after 1000ms.'
	});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is AMD, CommonJS, and UMD?]]></title>
    <link href="http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/"/>
    <updated>2014-04-30T11:59:21-07:00</updated>
    <id>http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd</id>
    <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>Over the years there’s been a steadily increasing ecosystem of JavaScript components to choose from.  The sheer amount of choices is fantastic, but this also infamously presents a difficulty when components are mixed-and-matched.  And it doesn’t take too long for budding developers to find out that not all components are built to play nicely together.</p>

<p>To address these issues, the competing module specs AMD and CommonJS have appeared on the scene, allowing developers to write their code in an agreed-upon sandboxed and modularized way, so as not to “pollute the ecosystem”.</p>

<h2 id="amd">AMD</h2>
<p>Asynchronous Module Definition (AMD) has gained traction on the frontend, with RequireJS being the most popular implementation.</p>

<p>Here’s module <code>foo</code> with a single dependency on <code>jquery</code>:</p>

<pre><code class="language-javascript">    //    filename: foo.js
    define(['jquery'], function ($) {
        //    methods
        function myFunc(){};

        //    exposed public methods
        return myFunc;
    });
</code></pre>

<p>And a little more complicated example with multiple dependencies and multiple exposed methods:</p>

<pre><code class="language-javascript">    //    filename: foo.js
    define(['jquery', 'underscore'], function ($, _) {
        //    methods
        function a(){};    //    private because it's not returned (see below)
        function b(){};    //    public because it's returned
        function c(){};    //    public because it's returned

        //    exposed public methods
        return {
            b: b,
            c: c
        }
    });
</code></pre>

<p>The first part of the define is an array of dependencies, while the second part is essentially the callback function which is only executed when the dependencies are available (script loaders like RequireJS take care of that part, including figuring out where the files are located).</p>

<p>Note that the dependency to variable order is important (ex. jquery-&gt;<code>$</code>, underscore-&gt;<code>_</code>).</p>

<p>Also note that we can map the dependencies to any arbitrary variables we want here.  If we change <code>$</code> to <code>$$</code> in the code above, all jQuery references within our function block will be <code>$$</code> instead of <code>$</code>.</p>

<p>And note, most importantly, that you can’t reference the variables <code>$</code> and <code>_</code> outside of the function, because it’s sandboxed from other code.  That’s the goal here!</p>

<h2 id="commonjs">CommonJS</h2>

<p>CommonJS is a style you may be familiar with if you’re written anything in Node (which uses a slight variant).  It’s also been gaining traction on the frontend with Browserify.</p>

<p>Using the same format as before, here’s what our <code>foo</code> module looks like in CommonJS:</p>

<pre><code class="language-javascript">    //    filename: foo.js

    //    dependencies
    var $ = require('jquery');

    //    methods
    function myFunc(){};

    //    exposed public method (single)
    module.exports = myFunc;
</code></pre>

<p>And our more complicate example, with multiple dependencies and multiple exposed methods:</p>

<pre><code class="language-javascript">    //    filename: foo.js
    var $ = require('jquery');
    var _ = require('underscore');

    //    methods
    function a(){};    //    private because it's omitted from module.exports (see below)
    function b(){};    //    public because it's defined in module.exports
    function c(){};    //    public because it's defined in module.exports

    //    exposed public methods
    module.exports = {
        b: b,
        c: c
    };
</code></pre>

<h2 id="umd-universal-module-definition">UMD: Universal Module Definition</h2>

<p>Since CommonJS and AMD styles have both been equally popular, it seems there’s yet no consensus.  This has brought about the push for a “universal” pattern that supports both styles, which brings us to none other than the Universal Module Definition.</p>

<p>The pattern is admittedly ugly, but is both AMD and CommonJS compatible, as well as supporting the old-style “global” variable definition:</p>

<pre><code class="language-javascript">    (function (root, factory) {
        if (typeof define === 'function' &amp;&amp; define.amd) {
            // AMD
            define(['jquery'], factory);
        } else if (typeof exports === 'object') {
            // Node, CommonJS-like
            module.exports = factory(require('jquery'));
        } else {
            // Browser globals (root is window)
            root.returnExports = factory(root.jQuery);
        }
    }(this, function ($) {
        //    methods
        function myFunc(){};

        //    exposed public method
        return myFunc;
    }));
</code></pre>

<p>And keeping in the same pattern as the above examples, the more complicated case with multiple dependencies and multiple exposed methods:</p>

<pre><code class="language-javascript">    (function (root, factory) {
        if (typeof define === 'function' &amp;&amp; define.amd) {
            // AMD
            define(['jquery', 'underscore'], factory);
        } else if (typeof exports === 'object') {
            // Node, CommonJS-like
            module.exports = factory(require('jquery'), require('underscore'));
        } else {
            // Browser globals (root is window)
            root.returnExports = factory(root.jQuery, root._);
        }
    }(this, function ($, _) {
        //    methods
        function a(){};    //    private because it's not returned (see below)
        function b(){};    //    public because it's returned
        function c(){};    //    public because it's returned

        //    exposed public methods
        return {
            b: b,
            c: c
        }
    }));
</code></pre>

<p>(Sep 2014 edit: fixed syntax for CommonJS in the last example)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The mobile web is dead (and we have killed it)]]></title>
    <link href="http://davidbcalhoun.com/2014/the-mobile-web-is-dead-and-we-have-killed-it"/>
    <updated>2014-04-14T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2014/the-mobile-web-is-dead-and-we-have-killed-it</id>
    <content type="html"><![CDATA[<p>The mobile web is dead.</p>

<p><em>(Banner: would you like to download the app?)</em></p>

<p>The mobile web remains dead.</p>

<p><em>(Splash screen: download the app!)</em></p>

<p>And <strong>we</strong> have killed it.</p>

<p><em>(JavaScript prompt: “Yahoo! can serve you more accurate local weather and news if you enable location services”)</em></p>

<p>Yet its shadow still looms.</p>

<p><em>(Prompt: Yahoo! would like to use your Current Location)</em></p>

<p>How shall we comfort ourselves, the murderers of all murderers?</p>

<p><em>(“Do you want to change your search engine to Yahoo?”)</em></p>

<p><em>(“This forum has an app for iPhone and iPod Touch!  Click OK to learn more about Tapatalk.”)</em></p>

<p>(adapted from <a href="http://en.wikipedia.org/wiki/God_is_dead">Nietzsche’s “God is dead”</a>)</p>

<h3 id="download-the-app-is-king-content-is-secondary">“Download the app” is king; content is secondary</h3>
<p><a href="https://plus.google.com/u/0/+ChristianHeilmann/posts/Tkpqip4uZpB"><img src="http://davidbcalhoun.com/wp-content/uploads/2014/paul-irish-native-apps-eating-our-lunch.png" /></a></p>

<p>What you tried to read above was not entirely different from my once-a-year curiosity visit to Yahoo’s mobile homepage (ok, minus the jab at the much-hated Tapatalk).  During the course of one visit and one search, those really are all the prompts which got in the way of what I was trying to accomplish on the site.</p>

<p>While I’d love to pick on Yahoo in particular, mobile users know this common experience all too well.</p>

<p>The sad truth is that the primary content of many mobile sites is now a big giant “Download the app here” button.  How strange that we find ourseles in a world where the secondary content is that which the user is actually interested in.</p>

<h3 id="native-vs-web">Native vs. Web</h3>
<p>Like most things, we humans like to create dichotomies, and we did the same with native and web, persistently thinking them to be mutually exclusive.</p>

<p>For a short time, it seemed, contrary to mobile platforms that came before, that the revolutionary smartphone of 2007 would have developers creating a flurry of web apps:</p>

<blockquote>
  <p>The full Safari engine is inside of iPhone. And so, you can write amazing Web 2.0 and Ajax apps <em>that look exactly and behave exactly like apps on the iPhone</em>. And these apps can integrate perfectly with iPhone services. They can make a call, they can send an email, they can look up a location on Google Maps. And guess what? There’s no SDK that you need! You’ve got everything you need if you know how to write apps using the most modern web standards to write amazing apps for the iPhone today. So developers, we think we’ve got a very sweet story for you. You can begin building your iPhone apps today. (<a href="http://youtu.be/8Vq993Td6ys?t=37s">Steve Jobs at WWDC 2007</a>, emphasis mine)</p>
</blockquote>

<p>Interestingly, even in that keynote you can see shades of web apps being pitted against native apps.  And what would both developers and consumers rather have: an emulated native experience, or a true native experience?  Most folks have always wanted the latter, and the latter has consistently delivered a better user experience.</p>

<p>Very talented developers have created “native-like” experiences on the web, including the old iPhone user guide (powered by <a href="http://davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie/">PastryKit</a>), but all along it’s been native apps which have required less effort and less clever tricks for smooth user interfaces.  However, this being said, it should also be noted that many native apps today actually have a web view component, and end users are often unaware of this fact.</p>

<p>In 2007, after the release of the first iPhone, the web app vision was soon abandoned after a somewhat lackluster and uncoordinated response from us developers.  Apple also realized the monetary potential of native apps and a wildly successful centralized App Store, a path that’s led us to our current situation:</p>

<p><a href="http://blog.flurry.com/bid/109749/Apps-Solidify-Leadership-Six-Years-into-the-Mobile-Revolution"><img src="http://davidbcalhoun.com/wp-content/uploads/2014/apps-dominate.jpg" alt="Apps Continue to Dominate the Mobile Web: 2013 saw 80% of time spent in apps and 20% of time on the mobile web, whereas 2014 is currently seeing 86% app usage and 14% mobile web usage." /></a></p>

<h3 id="keep-calm-and-carry-on-">Keep Calm and Carry On… ?</h3>
<p>The web isn’t going away anytime soon, and that means the mobile web is also here to stay, even if less people are using it.  But it unfortunately means less emphasis on mobile experiences, which means less demand for mobile web developers.</p>

<p>It means that the mobile web, and probably the larger web as a whole, will only be considered as an afterthought, if considered at all.  We’ve already witnessed this happening with the mobile web being considered a sort of sub/side topic of responsive web design.</p>

<h3 id="extremely-depressing-related-links">Extremely depressing related links</h3>
<ul>
  <li><a href="http://youtu.be/8Vq993Td6ys?t=37s">Video: Steve Jobs espousing web apps at the iPhone launch in 2007</a></li>
  <li><a href="http://www.youtube.com/watch?v=19g4n0ZxiYM">Video: Paul Irish - The Mobile Web Is In Deep Trouble</a></li>
  <li><a href="http://blog.flurry.com/bid/109749/Apps-Solidify-Leadership-Six-Years-into-the-Mobile-Revolution">Apps Continue to Dominate the Mobile Web</a></li>
  <li><a href="http://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/">Mark Zuckerberg: Our Biggest Mistake Was Betting Too Much On HTML5</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Negative Scroll Blur (for browsers that support CSS filters)]]></title>
    <link href="http://davidbcalhoun.com/2013/introducing-negative-scroll-blur-for-browsers-that-support-css-filters"/>
    <updated>2013-11-23T00:00:00-08:00</updated>
    <id>http://davidbcalhoun.com/2013/introducing-negative-scroll-blur-for-browsers-that-support-css-filters</id>
    <content type="html"><![CDATA[<p>(2016: in retrospect, this is kind of gratuitous and doesn’t appear to be fully working anymore…)</p>

<p><a href="http://davidbcalhoun.com/a/negative-scroll-blur.html">Demo</a></p>

<p>Just for fun, I wanted to reproduce a cool but completely superfluous UI I saw in the updated Foursquare app recently. Basically, when the user tries to scroll past the upper bound of the app/page, the header image becomes blurred.</p>

<p>We can do the same thing on the web by listening for negative scroll and then using (abusing?) CSS filters.</p>

<h3 id="video">Video</h3>

<p><a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=wfuVM1P_qgg " target="_blank"><img src="http://img.youtube.com/vi/wfuVM1P_qgg/0.jpg" alt="Negative Scroll Blur" width="480" height="360" /></a></p>

<h3 id="extra-tweaks-for-mobile">Extra tweaks for mobile</h3>

<p>Note that there’s an extra trick for iOS, which presents problems I had forgotten about (namely, no negative scroll, and a scroll listener which fires once at the end of scrolling). That’s why I had to throw in some extra logic for touchstart/touchmove/touchend.</p>

<h3 id="links">Links</h3>

<p><a href="http://davidbcalhoun.com/a/negative-scroll-blur.html">Demo</a>  <br />
<a href="https://github.com/davidcalhoun/negative-scroll-blur">Github</a></p>

]]></content>
  </entry>
  
</feed>
