<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | David Calhoun's blog]]></title>
  <link href="http://davidbcalhoun.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://davidbcalhoun.com/"/>
  <updated>2014-09-07T23:41:01-07:00</updated>
  <id>http://davidbcalhoun.com/</id>
  <author>
    <name><![CDATA[David Calhoun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is AMD, CommonJS, and UMD?]]></title>
    <link href="http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/"/>
    <updated>2014-04-30T11:59:21-07:00</updated>
    <id>http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd</id>
    <content type="html"><![CDATA[<h3 id="intro">Intro</h3>
<p>Over the years there’s been a steadily increasing ecosystem of JavaScript components to choose from.  The sheer amount of choices is fantastic, but this also infamously presents a difficulty when components are mixed-and-matched.  And it doesn’t take too long for budding developers to find out that not all components are built to play nicely together.</p>

<p>To address these issues, the competing module specs AMD and CommonJS have appeared on the scene, allowing developers to write their code in an agreed-upon sandboxed and modularized way, so as not to “pollute the ecosystem”.</p>

<h3 id="amd">AMD</h3>
<p>Asynchronous Module Definition (AMD) has gained traction on the frontend, with RequireJS being the most popular implementation.</p>

<p>Here’s module <code>foo</code> with a single dependency on <code>jquery</code>:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre><span class="comment">//    filename: foo.js</span>
define([<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>], <span class="keyword">function</span> (<span class="predefined">$</span>) {
    <span class="comment">//    methods</span>
    <span class="keyword">function</span> <span class="function">myFunc</span>(){};

    <span class="comment">//    exposed public methods</span>
    <span class="keyword">return</span> myFunc;
});
</pre></td>
</tr></table>
</div>

<p>And a little more complicated example with multiple dependencies and multiple exposed methods:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre><span class="comment">//    filename: foo.js</span>
define([<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">underscore</span><span class="delimiter">'</span></span>], <span class="keyword">function</span> (<span class="predefined">$</span>, _) {
    <span class="comment">//    methods</span>
    <span class="keyword">function</span> <span class="function">a</span>(){};    <span class="comment">//    private because it's not returned (see below)</span>
    <span class="keyword">function</span> <span class="function">b</span>(){};    <span class="comment">//    public because it's returned</span>
    <span class="keyword">function</span> <span class="function">c</span>(){};    <span class="comment">//    public because it's returned</span>

    <span class="comment">//    exposed public methods</span>
    <span class="keyword">return</span> {
        <span class="key">b</span>: b,
        <span class="key">c</span>: c
    }
});
</pre></td>
</tr></table>
</div>

<p>The first part of the define is an array of dependencies, while the second part is essentially the callback function which is only executed when the dependencies are available (script loaders like RequireJS take care of that part, including figuring out where the files are located).</p>

<p>Note that the dependency to variable order is important (ex. jquery-&gt;<code>$</code>, underscore-&gt;<code>_</code>).</p>

<p>Also note that we can map the dependencies to any arbitrary variables we want here.  If we change <code>$</code> to <code>$$</code> in the code above, all jQuery references within our function block will be <code>$$</code> instead of <code>$</code>.</p>

<p>And note, most importantly, that you can’t reference the variables <code>$</code> and <code>_</code> outside of the function, because it’s sandboxed from other code.  That’s the goal here!</p>

<h3 id="commonjs">CommonJS</h3>

<p>CommonJS is a style you may be familiar with if you’re written anything in Node (which uses a slight variant).  It’s also been gaining traction on the frontend with Browserify.</p>

<p>Using the same format as before, here’s what our <code>foo</code> module looks like in CommonJS:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre><span class="comment">//    filename: foo.js</span>

<span class="comment">//    dependencies</span>
<span class="keyword">var</span> <span class="predefined">$</span> = require(<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>);

<span class="comment">//    methods</span>
<span class="keyword">function</span> <span class="function">myFunc</span>(){};

<span class="comment">//    exposed public method (single)</span>
module.exports = myFunc;
</pre></td>
</tr></table>
</div>

<p>And our more complicate example, with multiple dependencies and multiple exposed methods:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre><span class="comment">//    filename: foo.js</span>
<span class="keyword">var</span> <span class="predefined">$</span> = require(<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> _ = require(<span class="string"><span class="delimiter">'</span><span class="content">underscore</span><span class="delimiter">'</span></span>);

<span class="comment">//    methods</span>
<span class="keyword">function</span> <span class="function">a</span>(){};    <span class="comment">//    private because it's omitted from module.exports (see below)</span>
<span class="keyword">function</span> <span class="function">b</span>(){};    <span class="comment">//    public because it's defined in module.exports</span>
<span class="keyword">function</span> <span class="function">c</span>(){};    <span class="comment">//    public because it's defined in module.exports</span>

<span class="comment">//    exposed public methods</span>
module.exports = {
    <span class="key">b</span>: b,
    <span class="key">c</span>: c
};
</pre></td>
</tr></table>
</div>

<h3 id="umd-universal-module-definition">UMD: Universal Module Definition</h3>

<p>Since CommonJS and AMD styles have both been equally popular, it seems there’s yet no consensus.  This has brought about the push for a “universal” pattern that supports both styles, which brings us to none other than the Universal Module Definition.</p>

<p>The pattern is admittedly ugly, but is both AMD and CommonJS compatible, as well as supporting the old-style “global” variable definition:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre>(<span class="keyword">function</span> (root, factory) {
    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string"><span class="delimiter">'</span><span class="content">function</span><span class="delimiter">'</span></span> &amp;&amp; define.amd) {
        <span class="comment">// AMD</span>
        define([<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>], factory);
    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string"><span class="delimiter">'</span><span class="content">object</span><span class="delimiter">'</span></span>) {
        <span class="comment">// Node, CommonJS-like</span>
        module.exports = factory(require(<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>));
    } <span class="keyword">else</span> {
        <span class="comment">// Browser globals (root is window)</span>
        root.returnExports = factory(root.jQuery);
    }
}(<span class="local-variable">this</span>, <span class="keyword">function</span> (<span class="predefined">$</span>) {
    <span class="comment">//    methods</span>
    <span class="keyword">function</span> <span class="function">myFunc</span>(){};

    <span class="comment">//    exposed public method</span>
    <span class="keyword">return</span> myFunc;
}));
</pre></td>
</tr></table>
</div>

<p>And keeping in the same pattern as the above examples, the more complicated case with multiple dependencies and multiple exposed methods:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
</pre></td>
  <td class="code"><pre>(<span class="keyword">function</span> (root, factory) {
    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string"><span class="delimiter">'</span><span class="content">function</span><span class="delimiter">'</span></span> &amp;&amp; define.amd) {
        <span class="comment">// AMD</span>
        define([<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">underscore</span><span class="delimiter">'</span></span>], factory);
    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string"><span class="delimiter">'</span><span class="content">object</span><span class="delimiter">'</span></span>) {
        <span class="comment">// Node, CommonJS-like</span>
        module.exports = factory(require(<span class="string"><span class="delimiter">'</span><span class="content">jquery</span><span class="delimiter">'</span></span>), require(<span class="string"><span class="delimiter">'</span><span class="content">underscore</span><span class="delimiter">'</span></span>));
    } <span class="keyword">else</span> {
        <span class="comment">// Browser globals (root is window)</span>
        root.returnExports = factory(root.jQuery, root._);
    }
}(<span class="local-variable">this</span>, <span class="keyword">function</span> (<span class="predefined">$</span>, _) {
    <span class="comment">//    methods</span>
    <span class="keyword">function</span> <span class="function">a</span>(){};    <span class="comment">//    private because it's not returned (see below)</span>
    <span class="keyword">function</span> <span class="function">b</span>(){};    <span class="comment">//    public because it's returned</span>
    <span class="keyword">function</span> <span class="function">c</span>(){};    <span class="comment">//    public because it's returned</span>

    <span class="comment">//    exposed public methods</span>
    <span class="keyword">return</span> {
        <span class="key">b</span>: b,
        <span class="key">c</span>: c
    }
}));
</pre></td>
</tr></table>
</div>

<p>(Sep 2014 edit: fixed syntax for CommonJS in the last example)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Can't JavaScript Under Pressure walkthrough]]></title>
    <link href="http://davidbcalhoun.com/2013/you-cant-javascript-under-pressure-walkthrough"/>
    <updated>2013-10-04T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2013/you-cant-javascript-under-pressure-walkthrough</id>
    <content type="html"><![CDATA[<p>A friend posted a link to this fun little quiz - <a href="http://toys.usvsth3m.com/javascript-under-pressure/">You Can’t JavaScript Under Pressure</a>.</p>

<p>The quizzes get more and more difficult, and they present a nice challenge if you fear your skills are getting rusty. Give it an honest try first, then come back here if you get seriously, honestly stuck. Try to do it yourself!</p>

<h3 id="quiz-1-doubleinteger">Quiz 1: doubleInteger</h3>

<h4 id="problem">Problem</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">doubleInteger</span>(i) {
    <span class="comment">// i will be an integer. Double it and return it.</span>

    <span class="keyword">return</span> i;
}
</pre></td>
</tr></table>
</div>

<h4 id="solution">Solution</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">doubleInteger</span>(i) {
    <span class="comment">// i will be an integer. Double it and return it.</span>
    
    <span class="keyword">return</span> i * <span class="integer">2</span>;
}
</pre></td>
</tr></table>
</div>

<h4 id="explanation">Explanation</h4>

<p>Nothing tricky going on here. The prompt implies this should be done in two steps, but a one-liner works. We know i will always be an integer, so we don’t need any sanitization checks, just a straight up return.</p>

<h3 id="quiz-2-isnumbereven">Quiz 2: isNumberEven</h3>

<h4 id="problem-1">Problem</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">isNumberEven</span>(i) {
    <span class="comment">// i will be an integer. Return true if it’s even, and false if it isn’t.</span>
}
</pre></td>
</tr></table>
</div>

<h4 id="solution-1">Solution</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">isNumberEven</span>(i) {
    <span class="comment">// i will be an integer. Return true if it’s even, and false if it isn’t.</span>
    
    <span class="keyword">if</span>(i % <span class="integer">2</span> === ) {
        <span class="comment">//  no remainder, so it must be an even number</span>
        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
    } <span class="keyword">else</span> {
        <span class="comment">//  remainder, so it must be odd.</span>
        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
    }
}
</pre></td>
</tr></table>
</div>

<h4 id="explanation-1">Explanation</h4>

<p>Again, no sanitization needed here because i is guaranteed to be an integer. The solution relies on an understanding of the modulus function - this is something usually learned in school, but something I haven’t had to use since, except in interviews or quizzes. Or quizzes during interviews.</p>

<p>Basically, think of modulus as “remainder” function for division problems. For instance, <code>4 % 2</code> will give a modulus of <code>1</code> because 4 goes into 2 twice, evenly, with zero remainder. On the other hand, <code>5 % 2</code> will give a modulus of <code>1</code> because 5 goes into 2 twice, with a remainder of 1. This turns out to be a handy way to differentiate even (4) and odd (5) numbers.</p>

<p>(note that the <code>else</code> isn’t needed here, but it gives greater clarity to what’s going on)</p>

<h3 id="quiz-3-getfileextension">Quiz 3: getFileExtension</h3>

<h4 id="problem-2">Problem</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">getFileExtension</span>(i) {
    <span class="comment">// i will be a string, but it may not have a file extension.</span>
    <span class="comment">// return the file extension (with no period) if it has one, otherwise false</span>
}
</pre></td>
</tr></table>
</div>

<h4 id="solution-2">Solution</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">getFileExtension</span>(i) {
    <span class="comment">// i will be a string, but it may not have a file extension.</span>
    <span class="comment">// return the file extension (with no period) if it has one, otherwise false</span>

    <span class="keyword">var</span> filenameArray = i.split(<span class="error">”</span>.<span class="error">”</span>);

    <span class="keyword">if</span>(filenameArray.length &lt;= <span class="integer">1</span>) {
        <span class="comment">//  i.e. “foo” becomes [“foo”] (array with 1 member)</span>
        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
    } <span class="keyword">else</span> {
        <span class="comment">//  must be an array with more than 1 member.  The extension must be at the end.</span>
        <span class="keyword">return</span> filenameArray[filenameArray.length - <span class="integer">1</span>];
    }
}
</pre></td>
</tr></table>
</div>

<h4 id="explanation-2">Explanation</h4>

<p>Now we’re getting a bit tougher!</p>

<p>Strings have a handy function that splits them into an array: <code>split()</code>. For instance,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre><span class="string"><span class="delimiter">&quot;</span><span class="content">foo.bar.baz</span><span class="delimiter">&quot;</span></span>.split(<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span>)
</pre></td>
</tr></table>
</div>

<p>will output</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>[<span class="string"><span class="delimiter">&quot;</span><span class="content">foo</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">bar</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">baz</span><span class="delimiter">&quot;</span></span>]
</pre></td>
</tr></table>
</div>

<p>Notice that the periods have been removed, just as the prompt asked for!</p>

<p>In this case we need to first check if there was no file extension. This means that there were no periods to split on, resulting in a one-member array (<code>"foo".split(".")</code> becomes <code>["foo"]</code>). In this case we return <code>false</code>, as the prompt asks for.</p>

<p>Now, in the else case, we know that the array must be larger than 1, meaning that it has a file extension. Since the file extension is always at the end, we know that it must be the last member in the array.</p>

<p>We can find the index of the last member by taking into account array length (<code>filenameArray.length</code>) and the fact that the array is zero-indexed, meaning that we need to subtract 1 from this length. Now we know the extension exists and is at the end of the array, so all we need to do is return it:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre><span class="keyword">return</span> filenameArray[filenameArray.length - <span class="integer">1</span>];
</pre></td>
</tr></table>
</div>

<h3 id="quiz-4-longeststring">Quiz 4: longestString</h3>

<h4 id="problem-3">Problem</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">longestString</span>(i) {
    <span class="comment">// i will be an array.</span>
    <span class="comment">// return the longest string in the array</span>
    
}
</pre></td>
</tr></table>
</div>

<h4 id="solution-3">Solution</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">longestString</span>(i) {
    <span class="comment">// i will be an array.</span>
    <span class="comment">// return the longest string in the array</span>
 
    <span class="keyword">var</span> longest = <span class="error">”</span><span class="error">”</span>,
        n, len;

    <span class="keyword">for</span>(n=, len=i.length; n&lt;len; n++) {
        <span class="keyword">if</span>(<span class="keyword">typeof</span> n[i] !== <span class="error">“</span>string<span class="error">”</span>) {
            <span class="comment">//  not a string, go to next iteration of the loop</span>
            <span class="keyword">continue</span>;
        }

        <span class="keyword">if</span>(n[i].length &gt; longest.length) {
            <span class="comment">//  Current string is longer, so set it as the new longest string</span>
            longest = n[i];
        }
    }   
}
</pre></td>
</tr></table>
</div>

<h4 id="explanation-3">Explanation</h4>

<p>This is a pretty classic interview question. It’s fairly easy and straightforward: just keep track of the longest string in a variable, then loop through all the members of the array. If the current member is longer, set it as the new longest string. At the end, return whatever that variable contains.</p>

<p>Note the extra sanitization check here to make sure the type is a string. If it’s not a string, we <code>continue</code> to continue to the next iteration of the <code>for</code> loop. (Note that this is similar to returning early in functions)</p>

<h3 id="quiz-5-arraysum">Quiz 5: arraySum</h3>

<h4 id="problem-4">Problem</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">arraySum</span>(i) {
    <span class="comment">// i will be an array, containing integers, strings and/or arrays like itself.</span>
    <span class="comment">// Sum all the integers you find, anywhere in the nest of arrays.   </span>
}
</pre></td>
</tr></table>
</div>

<h4 id="solution-4">Solution</h4>
<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">arraySum</span>(i) {
    <span class="keyword">var</span> sum = ,
        n, len;

    <span class="keyword">if</span>(<span class="keyword">typeof</span> i === <span class="error">“</span>number<span class="error">”</span>) {
        <span class="comment">//  i has been defined as a simple number through a recursive call</span>
        sum += i;
    } <span class="keyword">else</span> <span class="keyword">if</span>(Array.isArray(i)) {
        <span class="comment">//  i is an array, so iterate through it</span>
        <span class="keyword">for</span>(n=, len=i.length; n&lt;len; n++) {
            <span class="comment">//  recursive call</span>
            sum += arraySum(i[n]);
        }
    }

    <span class="keyword">return</span> sum;
}
</pre></td>
</tr></table>
</div>

<h4 id="explanation-4">Explanation</h4>

<p>The best way to handle this one is through recursion, which is tricky but powerful. I admit that on my first attempts writing it in the console, my browser froze up and I had to restart it.</p>

<p>Recursive functions are very elegant but tricky. It helps to step through with examples.</p>

<p>First, let’s start with <code>arraySum(1)</code>. The output is of course 1, but note that we didn’t actually input an array. The code took the first codepath in the <code>if</code> statement (because <code>typeof 1 === "number"</code> is true)</p>

<p>Let’s see what happens when we input a basic array:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>arraySum([<span class="integer">1</span>]);  <span class="comment">// 1</span>
</pre></td>
</tr></table>
</div>

<p>Again the answer is 1, but this time the codepath was different. This time <code>Array.isArray([1])</code> was true, and the function was called recursively for each of the members in the array. That is to say, each member of the array (in this case the single member) was sent to arraySum as a simple integer. So the recursive call was the same as the original example: <code>arraySum(1)</code>, and the output was the same.</p>

<p>In the case of more numbers, the outputs are all added to the <code>sum</code> and then returned back at the end of the function.</p>

<p>Note that this works quite well for even deeply nested arrays, since arraySum() has logic for arrays that will always return the sum of all of its deeply nested integers:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>arraySum([<span class="integer">1</span>, [<span class="integer">2</span>,[<span class="integer">3</span>,[<span class="integer">4</span>,[<span class="integer">5</span>]]]]]);   <span class="comment">// 15</span>
</pre></td>
</tr></table>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different ways of defining functions in JavaScript (this is madness!)]]></title>
    <link href="http://davidbcalhoun.com/2011/different-ways-of-defining-functions-in-javascript-this-is-madness"/>
    <updated>2011-06-24T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2011/different-ways-of-defining-functions-in-javascript-this-is-madness</id>
    <content type="html"><![CDATA[<h3 id="this-is-madness-this8230-is8230-javascript">This is madness! This… is… JavaScript!</h3>

<p>In JavaScript, there’s many different ways of doing something. This is both a good thing and a bad thing. To the newcomer this is definitely a bad thing, as it means not only more things to learn, but more little caveats and more places to go wrong. And so it is with declaring functions!</p>

<p>The aim of this is just an accessible tour of the landscape, just so you know what’s out there and what the basic differences are. Do be sure to check out the “further reading” section as well! Much of this is based on <a href="http://kangax.github.com/nfe/">Juriy “kangax” Zaytsev’s article</a>, which goes into more depth. But I found that there wasn’t just one reference to show all the different variable declarations.</p>

<p>How about ways to execute functions? That opens up another can of worms, and incidentally opens up the possibility for a future post on that topic. <img src="http://davidbcalhoun.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>

<h3 id="overview-different-ways-of-declaring-functions">Overview: different ways of declaring functions</h3>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">A</span>(){};             <span class="comment">// function declaration</span>
<span class="keyword">var</span> <span class="function">B</span> = <span class="keyword">function</span>(){};       <span class="comment">// function expression</span>
<span class="keyword">var</span> C = (<span class="keyword">function</span>(){});     <span class="comment">// function expression with grouping operators</span>
<span class="keyword">var</span> <span class="function">D</span> = <span class="keyword">function</span> <span class="function">foo</span>(){};   <span class="comment">// named function expression</span>
<span class="keyword">var</span> E = (<span class="keyword">function</span>(){        <span class="comment">// immediately-invoked function expression (IIFE) that returns a function</span>
  <span class="keyword">return</span> <span class="keyword">function</span>(){}
})();
<span class="keyword">var</span> F = <span class="keyword">new</span> Function();     <span class="comment">// Function constructor</span>
<span class="keyword">var</span> G = <span class="keyword">new</span> <span class="keyword">function</span>(){};   <span class="comment">// special case: object constructor</span>
</pre></td>
</tr></table>
</div>

<h3 id="function-declarations-function-a">Function declarations: function A(){};</h3>

<p>Function declarations are probably the most familiar and oldest way of doing things in JavaScript land. This creates a variable A which is accessible in the current scope. Scope is a separate topic, so we’ll do everything in the global scope for all these examples (something you want to avoid usually).</p>

<h4 id="hoisting">1. Hoisting</h4>

<p>The interesting thing about these is that they are “hoisted” to the top of their scope, which means this code:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>A();
<span class="keyword">function</span> <span class="function">A</span>(){
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>);
};
</pre></td>
</tr></table>
</div>

<p>Gets executed as this code:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">A</span>(){
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>);
};
A();
</pre></td>
</tr></table>
</div>

<p>Which practically means that, yes, you can call the functions before they’re written in your code. It won’t matter, because the entire function gets hoisted to the top of its containing scope. (This is contrasted with variables, which only have their declaration hoisted, not their contents, as we’ll see in the next section).</p>

<h4 id="no-function-declarations-in-if-statements-or-loops-etch4">2. No function declarations in <code>if</code> statements (or loops, etc)&lt;/h4&gt;</h4>
<p>You can’t define functions this way in expressions, for example <code>if</code> statements, which is common if we want to define different versions of a function for different circumstances, usually to address browser inconsistencies. Well, you <em>can</em> in some implementations, but the way the code is processed is inconsistent (kangax has documented the inconsistencies <a href="http://kangax.github.com/nfe/">here</a>). If you want to use this pattern, use function expressions instead.</p>

<h4 id="functions-declarations-must-have-names">3. Functions declarations must have names</h4>

<p>This method doesn’t allow you to create anonymous functions, meaning that you always have to give it an identifier (in this case we’ve used “A”).</p>

<h3 id="function-expressions-var-b--function">Function expressions: var B = function(){};</h3>

<p>A function expression looks similar to function declarations, except that the function is assigned to a variable name. Though functions are not primitive values in JavaScript, this is the way they can be utilized to their full effect in this functional language. Functions are “<a href="http://en.wikipedia.org/wiki/First-class_function">first class</a>“:</p>

<blockquote>
  <p>“[JavaScript] supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures”</p>
</blockquote>

<h4 id="anonymous-functions-they-don8217t-need-names">1. Anonymous functions (they don’t need names)</h4>

<p>The function name is optional in function expressions, and we call these anonymous. Here we’re setting the variable B equal to an anonymous function:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">B</span> = <span class="keyword">function</span>(){};
</pre></td>
</tr></table>
</div>

<h4 id="variable-declaration-hoisting">2. Variable declaration hoisting</h4>

<p>Variable declarations are hoisted to the top of their scope, somewhat similarly to function hoisting <em>except</em> the contents of the variable are not hoisted as well. This happens with all variables, and it means it’s now happening with our functions, now that we’re assigning them to variables.</p>

<p>This code:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">A</span> = <span class="keyword">function</span>(){};
<span class="keyword">var</span> <span class="function">B</span> = <span class="keyword">function</span>(){};
<span class="keyword">var</span> <span class="function">C</span> = <span class="keyword">function</span>(){};
</pre></td>
</tr></table>
</div>

<p>Will be executed as this:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> A, B, C;  <span class="comment">// variable declarations are hoisted</span>
<span class="function">A</span> = <span class="keyword">function</span>(){};
<span class="function">B</span> = <span class="keyword">function</span>(){};
<span class="function">C</span> = <span class="keyword">function</span>(){};
</pre></td>
</tr></table>
</div>

<p>Therefore the order of setting and calling this type of function is important:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span class="comment">// this works</span>
<span class="keyword">var</span> <span class="function">B</span> = <span class="keyword">function</span>(){};
B();

<span class="comment">// this doesn't work</span>
B2();  <span class="comment">// TypeError (B2 is undefined)</span>
<span class="keyword">var</span> <span class="function">B2</span> = <span class="keyword">function</span>(){};
</pre></td>
</tr></table>
</div>

<p>The second example gives us an error because only the variable B2′s declaration is hoisted, but not its definition, thus the “undefined” error.</p>

<h3 id="function-expressions-with-grouping-operators-var-c--function">Function expressions with grouping operators: var C = (function(){});</h3>

<p>These really aren’t different from plain old function expressions and aren’t really seen in the wild (so maybe they’re just good for JavaScript quizzes?). Recently this way of declaring functions was brought up in <a href="http://ironjs.wordpress.com/2011/06/22/my-gripes-with-javascript/">this article</a> and confused some folks including myself.</p>

<p>Here’s a good way to see what’s happening:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span>(){};  <span class="comment">// SyntaxError</span>
(<span class="keyword">function</span>(){});
</pre></td>
</tr></table>
</div>

<p>Why does one work and the other doesn’t? The first example is a function declaration, and we learned above that we can’t declare them anonymously – that is, they must have a name. That’s why we’re getting the syntax error.</p>

<p>The second example is using parenthesis – grouping operators – and is therefore evaluated differently, as a function expression. The grouping operators are the things we use to help show what should be evaluated first, as in mathematical problems. We’re saying “evaluate this first, then take the result and do something with it”:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>(<span class="integer">1</span> + <span class="integer">2</span>) * <span class="integer">3</span>;  <span class="comment">// 9</span>
<span class="integer">1</span> + (<span class="integer">2</span> * <span class="integer">3</span>);  <span class="comment">// 7</span>
</pre></td>
</tr></table>
</div>

<p>In the first example we’re saying “first add 1 and 2, then take the result and multiply by 3″, whereas in the second example we’re saying “first multiply 2 and 3, then take the result and add 1″.</p>

<p>Because functions are first class, we can use similar grouping operators. Here’s a facetious example, but it shows how we can essentially drop in a function in the same way:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>(<span class="keyword">function</span>(){} + <span class="integer">1</span>);  <span class="comment">// function(){}1</span>
</pre></td>
</tr></table>
</div>

<p>The result is a string (because toString is being called on the function, then added/appended with 1), but you get the idea I hope.</p>

<p>When the JavaScript engine encounters the opening parenthesis here, we’re essentially saying “ok, start grouping this together with something else”. Using our technical terms, we’re telling the engine that we’re not making a function declaration, but instead a function expression. And then we can assign the result to a variable:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>(<span class="keyword">function</span>(){});           <span class="comment">// resulting function not assigned</span>
<span class="keyword">var</span> foo = (<span class="keyword">function</span>(){}); <span class="comment">// resulting function assigned to foo</span>
<span class="keyword">var</span> <span class="function">bar</span> = <span class="keyword">function</span>(){};   <span class="comment">// resulting function assigned to bar</span>
</pre></td>
</tr></table>
</div>

<p>Here we can see that foo and bar are really just the same, because in foo we’re not grouping the function together with anything but itself.</p>

<h3 id="named-function-expression-var-d--function-foo">Named function expression: var D = function foo(){};</h3>

<p>Here we have our same old friend, the function expression. But instead of assigning the variable to an anonymous function, we’re assigning it to a named function (with the name foo).</p>

<h4 id="the-function-name-is-only-accessible-within-the-function">1. The function name is only accessible within the function</h4>

<p>We haven’t exposed the function name (foo) to the enclosing scope (in this case the global scope):</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">D</span> = <span class="keyword">function</span> <span class="function">foo</span>(){
  console.log(<span class="keyword">typeof</span> foo);
};
D();                       <span class="comment">// function</span>
console.log(<span class="keyword">typeof</span> foo);   <span class="comment">// undefined</span>
</pre></td>
</tr></table>
</div>

<h4 id="useful-for-recursion">2. Useful for recursion</h4>

<p>Because the function’s name is accessible in the function itself, this turns out to be useful for recursive functions, much more useful than the plain old anonymous function.</p>

<p>Here’s a trivial recursive function to illustrate calling itself from within the named function expression:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">countdown</span> = <span class="keyword">function</span> <span class="function">a</span>(count){
  <span class="keyword">if</span>(count &gt; <span class="integer">0</span>) {
    count--;
    <span class="keyword">return</span> a(count);  <span class="comment">// we can also do this: a(--count), which is less clear</span>
  }
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">end of recursive function</span><span class="delimiter">'</span></span>);
}
countdown(<span class="integer">5</span>);
</pre></td>
</tr></table>
</div>

<h4 id="useful-for-debugging">3. Useful for debugging</h4>

<p>As a <a href="http://kangax.github.com/nfe/">few</a> <a href="http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/">have</a> pointed out, giving previously anonymous functions names helps in debugging, since the function name shows up on the call stack.</p>

<h4 id="quirks-jscript8217s-bad-implementation">4. Quirks: JScript’s bad implementation</h4>

<p><a href="http://kangax.github.com/nfe/">kangax</a> points out that named function expressions are basically poison to JScript, Internet Explorer’s implementation of JavaScript.</p>

<p>The named function becomes a global variable, is hoisted like a function declaration, and actually ends up creating multiple instances of the same function.</p>

<h3 id="immediately-invoked-function-expressions-iife-var-e--functionreturn-function">Immediately-invoked function expressions (IIFE): var E = (function(){return function(){}})();</h3>

<p>“Execute this function, whose return value is another function, and assign that to the variable E”. This may seem like magic, but it’s actually quite simple, and the pattern is powerful and has useful applications, the most famous of which is the <a href="http://www.klauskomenda.com/code/javascript-programming-patterns/#module">module pattern</a>.</p>

<p>First we’ll use an example that doesn’t look like magic:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">foo</span> = <span class="keyword">function</span>(){
  <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>;
};
<span class="keyword">var</span> output = foo();
console.log(output);  <span class="comment">// 'bar'</span>
</pre></td>
</tr></table>
</div>

<p>We already learned about grouping operators above, so you should feel comfortable with saying this is equivalent:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">foo</span> = <span class="keyword">function</span>(){
  <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>;
};
<span class="keyword">var</span> output = (foo)(); <span class="comment">// note the extra grouping operators</span>
console.log(output);  <span class="comment">// 'bar'</span>
</pre></td>
</tr></table>
</div>

<p>Since foo is pointing to our function expression, we know that we can simply refrain from using the variable “foo” and drop in the entire function as an anonymous function (since functions are first class, after all!):</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> output = (<span class="keyword">function</span>(){
  <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>;
})();
console.log(output);  <span class="comment">// 'bar'</span>
</pre></td>
</tr></table>
</div>

<p>Hey wait, we just arrived at the magical resulting function! It turns out to be not so magical after all, once we break it down and see it for what it is. It’s simply shorthand for the code we wrote originally, where we defined a function, executed it, and defined output to be its return value.</p>

<p>I’ve included this method on the list of declaring functions because we can assign the return value to itself be a function:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> E = (<span class="keyword">function</span>(){
  <span class="keyword">return</span> <span class="keyword">function</span>(){}
})();
</pre></td>
</tr></table>
</div>

<h4 id="applications">Applications</h4>

<p>There are good applications for this, including information hiding using in the module pattern, (<a href="http://ejohn.org/blog/partial-functions-in-javascript/">partial application</a>, for example), and other clever uses of it. It’s definitely not a trivial pattern.</p>

<h3 id="function-constructor-var-f--new-function">Function constructor: var F = new Function();</h3>

<p>This method is extremely old and it’s not recommended to be used. You pass in an unlimited number of arguments in the front, then the actual function body appears as a string in the last argument (because it’s a string, it’s effectively the equivalent of eval(), and isn’t recommended).</p>

<h4 id="defining-the-function">1. Defining the function</h4>

<p>You can create a function like this:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> F = <span class="keyword">new</span> Function(<span class="string"><span class="delimiter">'</span><span class="content">arg1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">arg2</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">console.log(arg1 + &quot;, &quot; + arg2)</span><span class="delimiter">'</span></span>);
F(<span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>);  <span class="comment">// 'foo, bar'</span>
</pre></td>
</tr></table>
</div>

<h4 id="you-dont-need-the-new-operatorh4">2. You don’t need the <code>new</code> operator&lt;/h4&gt;</h4>
<p>You can simply write <code>var F = Function();</code> to get the same result.</p>

<h4 id="quirks">3. Quirks</h4>

<p>The <a href="https://developer.mozilla.org/en/JavaScript/Reference/Functions_and_function_scope#Function_constructor_vs._function_declaration_vs._function_expression">MDN docs</a> have some good examples of the quirks, including the fact that functions declared with the Function constructor don’t inherit their current scope properly (i.e. a closure isn’t formed).</p>

<p>What this means is that they don’t have access to variables in their enclosing scope, which isn’t particularly useful:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre><span class="keyword">function</span> <span class="function">foo</span>(){
  <span class="keyword">var</span> bar = <span class="string"><span class="delimiter">'</span><span class="content">blah</span><span class="delimiter">'</span></span>;
  
  <span class="keyword">var</span> first = <span class="keyword">new</span> Function(<span class="string"><span class="delimiter">'</span><span class="content">console.log(typeof bar)</span><span class="delimiter">'</span></span>);
  first();   <span class="comment">// undefined</span>
  
  <span class="keyword">var</span> <span class="function">second</span> = <span class="keyword">function</span>(){
    console.log(<span class="keyword">typeof</span> bar);
  }
  second();  <span class="comment">// string</span>
}
foo();
</pre></td>
</tr></table>
</div>

<p>In the function “first”, we’re using the Function constructor, so it doesn’t have access to the variable bar. However, if we use the function “second”, which is a function expression, it does in fact have access to variables defined in its enclosing scope (via closure).</p>

<p>In other words, <em>don’t use the Function constructor</em>.</p>

<h3 id="special-case-8211-object-constructor-var-g--new-function-foo">Special case – object constructor: var G = new function foo(){};</h3>

<p>I saved this for last because we’re not really defining a function, though we are using the function keyword, so it’s worth noting at least.</p>

<p><code>new function(){};</code> creates a new object and invokes the anonymous function as its constructor. If an object is returned from the function, that becomes the resulting object, otherwise a new object is created from scratch and function is executed in the context of that new function (let’s save the details for another post!).</p>

<p>It’s a bit unusual to see it in this form. Let’s do it the proper way:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="keyword">var</span> <span class="function">Person</span> = <span class="keyword">function</span>(){
  console.log(<span class="local-variable">this</span>);  <span class="comment">// Person</span>
}
<span class="keyword">var</span> joe = <span class="keyword">new</span> Person();
</pre></td>
</tr></table>
</div>

<p>So really with the new operator, we are giving it a new ‘this’ context and then executing the given function with that new context. Much different than the function definitions we’ve been dealing with above! This does into a whole new topic, and we’ll save that for later!</p>

<h3 id="further-reading">Further reading</h3>

<p><a href="http://kangax.github.com/nfe/">Named function expressions demystified</a> (kangax)</p>

<p><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">Immediately-Invoked Function Expression (IIFE) (Ben Alman)</a></p>

<p><a href="https://developer.mozilla.org/en/JavaScript/Reference/Functions_and_function_scope">Functions and function scope</a> (Mozilla Developer Network – MDN)</p>

<p><a href="http://stackoverflow.com/questions/1140089/how-does-an-anonymous-function-in-javascript-work">How does an anonymous function in JavaScript work? (StackOverflow)</a></p>

<p><a href="http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/">Function Declarations vs. Function Expressions (JavaScript, JavaScript by Angus Croll)</a></p>

<p><a href="http://www.amazon.com/gp/product/0596805527/">JavaScript: The Definitive Guide</a> (classic book by David Flanagan)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking for undefined, null, and empty variables in JavaScript]]></title>
    <link href="http://davidbcalhoun.com/2011/checking-for-undefined-null-and-empty-variables-in-javascript"/>
    <updated>2011-02-11T00:00:00-08:00</updated>
    <id>http://davidbcalhoun.com/2011/checking-for-undefined-null-and-empty-variables-in-javascript</id>
    <content type="html"><![CDATA[<p>In general it’s a good practice to check for the existence of something before blindly using it by faith and hoping it works. There are various times during the execution of scripts when a variable may not be defined, it may be null, or it might be an empty string. These are three things that are easily conflated. A good way to look at this is thinking of these as having increasing levels of existence (getting a bit philosophical here for a moment…):</p>

<pre name="code" class="JScript">foo0;             // existence level 0 (creates the error "not defined")
var foo1;         // existence level 1 ("undefined" - variable declared but not defined/initialized)
var foo2 = null;  // existence level 2 (variable initialized, but isn't an Object, Number, String, etc)
var foo3 = "";    // existence level 3 (variable initialized to an empty String)
var foo4 = "bar"; // existence level 4 (variable initialized to String "foo")
</pre>

<p>Generally it would be handy if we had some way to filter out everything but the very last line. We simply want to check for these cases without the script entirely blowing up, as it does with the first line:</p>

<pre name="code" class="JScript">foo;  // ReferenceError: foo is not defined
</pre>

<p>We’re not particularly doing anything useful with foo here, but notice that the script fails out anyway. At this point any code that follows will not be executed. Your first instinct might be “Oh! I know how to contain these errors! We’ll use a try-catch!”:</p>

<pre name="code" class="JScript">try {
  foo;
} catch(e) {
  e.message;  // "foo is not defined"
}
</pre>

<p>The script still fails, but not critically, so your script continues to execute. But this turns out to aversely affect performance. The basic lesson here is that try-catch can be useful in some situations, but shouldn’t be used where alternatives are available.</p>

<h3 id="typeof-foo">typeof foo</h3>

<p>JavaScript has quite a useful remedy for this:</p>

<pre name="code" class="JScript">typeof foo; // "undefined"
</pre>

<p>Unlike everything else in JavaScript, typeof will deal with whatever you throw at it, including undefined variables. So you can use it as a simple check before using a variable that might not exist:</p>

<pre name="code" class="JScript">if(typeof foo !== "undefined") {
  // do something with foo
}
</pre>

<p>Note that this is easy to confuse with the</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          undefined
        </div>
      </td>
    </tr>
  </table>
</div>

<p>keyword, which in this case doesn’t help us one bit, as it gives us a fatal error:</p>

<pre name="code" class="JScript">if(foo !== undefined) {  // ReferenceError: foo is not defined

}
</pre>

<p>This filters out our first two cases, since they both evaluate to “undefined”:</p>

<pre name="code" class="JScript">typeof foo; // "undefined"

var bar;
typeof bar; // "undefined"
</pre>

<p>But this turns out not to work well for our other conditions, which evaluate differently:</p>

<pre name="code" class="JScript">typeof null;  // "object" (what?!)
typeof "";    // "string"
</pre>

<p>So we need to add other “if” conditions to check.. but there turns out to be a better way!</p>

<h3 id="exploiting-loose-typing">Exploiting loose typing</h3>

<p>JavaScript is a loosely typed language, which means that it will “automagically” cast variables into other types when necessary (i.e. when adding a Number to a String), sometimes resulting in the unexpected. For instance, whenever we use the “if” statement, the expected input is a Boolean true/false value. If JavaScript gets anything other than a Boolean, such as a String or a Number, instead of blowing up completely (as in strictly typed languages such as C), it’ll cast the variable into a Boolean for you.</p>

<p>“How handy!” you might think. Except in the following unexpected cases:</p>

<pre name="code" class="JScript">if("0") {
  // this will run because "0" is true
}

if("false") {
  // this will run because "false" is true
}
</pre>

<p>To see what JavaScript will cast a value to without having to use an</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          if
        </div>
      </td>
    </tr>
  </table>
</div>

<p>statement, we could create a new Boolean value with the following:</p>

<pre name="code" class="JScript">Boolean(0);    // false
Boolean("0");  // true
</pre>

<p>Or we can use the less intuitive but quick way of using double exclamation marks (this will probably award you cleverness points in someone’s book.. hopefully those points actually matter):</p>

<pre name="code" class="JScript">!!0;    // false
!!"0";  // true
</pre>

<p>This works because !foo converts foo to a Boolean but negates its original value, turning it on its head. !!foo converts foo to a Boolean and flips it back to its expected value, which is the same value that’s evaluated by our</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          if
        </div>
      </td>
    </tr>
  </table>
</div>

<p>statement.</p>

<p>Using this ALMOST gives us the answer we’re looking for:</p>

<pre name="code" class="JScript">!!foo0; // ReferenceError: foo0 is not defined

var foo1;
!!foo1; // false

var foo2 = null;
!!foo2; // false (same as !!null)

var foo3 = "";
!!foo3; // false (same as !!"")

var foo4 = "bar";
!!foot4; // true (same as !!"bar")
</pre>

<p>Excluding the first example, now we can test for uninitialized variables (foo1), null variables (foo2), and empty strings (foo3) all with just an</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          if
        </div>
      </td>
    </tr>
  </table>
</div>

<p>statement:</p>

<pre name="code" class="JScript">if(foo1) {
  // do something with foo1
}

if(foo2) {
  // do something with foo2
}

if(foo3) {
  // do something with foo3
}
</pre>

<p>Dang… so close! But we can’t yet test the first case without an error:</p>

<pre name="code" class="JScript">if(foo0) {  // ReferenceError: foo0 is not defined

}
</pre>

<h3 id="foo-versus-windowfoo-and-thisfoo">foo versus window.foo and this.foo</h3>

<p>The secret to our solution lies in how JavaScript handles undefined variables versus undefined properties. Here’s a quick reminder on the difference between the two:</p>

<pre name="code" class="JScript">// variable foo
var foo;

// property bar (and object variable foo)
var foo = {};  // create an empty object to add bar too
foo.bar = "";
</pre>

<p>The difference between these makes all the difference whether a fatal error occurs:</p>

<pre name="code" class="JScript">foo;  // ReferenceError: foo is not defined

var foo = {};
foo.bar;  // undefined
foo.blah; // undefined
</pre>

<p>We can randomly invent and check any property of</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          foo
        </div>
      </td>
    </tr>
  </table>
</div>

<p>we want, and the code will keep chugging along:</p>

<pre name="code" class="JScript">var foo = {};
foo.something = "hello";

if(foo.bar) { // undefined, interpreted as false (same as !!foo.bar)
  // never runs
}

if(foo.something) {
  foo.something;  // "hello"
}
</pre>

<p>Now comes the magic. If you know anything about JavaScript running in the browser, you know that all global variables are part of the</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          window
        </div>
      </td>
    </tr>
  </table>
</div>

<p>object. This means</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          foo
        </div>
      </td>
    </tr>
  </table>
</div>

<p>and</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          window.foo
        </div>
      </td>
    </tr>
  </table>
</div>

<p>are equivalent:</p>

<pre name="code" class="JScript">var foo;

foo === window.foo;  // true

// "this" is another bag of worms, but note this anyway
this.foo === window.foo;
</pre>

<p>So technically our variable foo is a <em>property</em> of the window object. So we should be able to check for any arbitrary variable in the window scope now!</p>

<pre name="code" class="JScript">window.foo;  // undefined (not a fatal error!)

// even though we're checking for the same thing, we get a fatal error…
foo;  // ReferenceError: foo is not defined
</pre>

<h3 id="practical-uses">Practical uses</h3>

<p>Now as long as we have a global entry point for our code, we can write our code in such a way that it won’t ever give us a fatal error if our variables aren’t yet defined:</p>

<pre name="code" class="JScript">if(window.foo &#038;&#038; foo.bar) {
  foo.bar();
}
</pre>

<p>Of course nothing happens, because we haven’t defined foo. But why doesn’t foo.bar give us a fatal error? Because the first test,</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          window.foo
        </div>
      </td>
    </tr>
  </table>
</div>

<p>failed out. It would be useless processing for the JavaScript engine to also evaluate the second statement, because the end result will still be the same (false &#038;&#038; true results in false, false &#038;&#038; false results in false). So it doesn’t get so far as</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          foo.bar
        </div>
      </td>
    </tr>
  </table>
</div>

<p>.</p>

<p>And now the code will work properly when we hook up our code to our</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          foo
        </div>
      </td>
    </tr>
  </table>
</div>

<p>global namespace:</p>

<pre name="code" class="JScript">var foo = {
  bar: function() {
    alert("hello world");
  }
}

if(window.foo &#038;&#038; foo.bar) {
  foo.bar();  // "hello world"
}
</pre>

<h3 id="shorthand">Shorthand</h3>

<p>It’s becoming common to see an abbreviation for the above code. Check out the following two methods, which accomplish the same thing:</p>

<pre name="code" class="JScript">// Method 1
if(window.foo &#038;&#038; foo.bar) {
  foo.bar();  // "hello world"
}

// Method 2
window.foo &#038;&#038; foo.bar &#038;&#038; (foo.bar());
</pre>

<p>Don’t get too scared.. these blocks of code are equivalent. Method 2 is shorter, but it simply goes something like this: if window.foo isn’t set, stop evaluating this line (just as above in the</p>

<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          if
        </div>
      </td>
    </tr>
  </table>
</div>

<p>statement). Otherwise, if foo.bar exists then execute the code in parentheses, which gives us an alert (“hello world”);</p>

<p>Just a word of caution about using Method 2: it’s obviously less clear what’s going on here. Your own cleverness might actually result in unnecessary confusion, especially of other people work in the same code base and they’re at different levels of understanding. In these cases we should first strive to be clear, and then only clever if it’s not at the expense of being clear.</p>

<p>It’s also likely that a code minifier would take care of this cleverness for us at build time, giving us the best of both worlds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript news resources]]></title>
    <link href="http://davidbcalhoun.com/2011/javascript-news-resources"/>
    <updated>2011-01-14T00:00:00-08:00</updated>
    <id>http://davidbcalhoun.com/2011/javascript-news-resources</id>
    <content type="html"><![CDATA[<p>There’s an overwhelming amount of information being pumped out of the JavaScript community each week, but how do you keep up with it? Here’s some sources to keep you busy.</p>

<h3 id="twitter">Twitter</h3>

<p>This merits a category of its own. This has replaced the RSS reader for a lot of folks, or at the very least supplemented it.</p>

<p>I’ve consistently recommended <a href="http://twitter.com/#!/nathansmith/javascript/">Nathan Smith’s list of JavaScript folks</a>. When I’m diligent, I keep up with this several times a week and <a href="http://twitter.com/#!/franksvalli/favorites/">favorite items from the feed</a> to be considered for inclusion in that week’s <a href="http://jsmag.com/blog/">JSMag Blog update</a>.</p>

<h3 id="aggregators-and-communities">Aggregators and communities</h3>

<p><a href="http://www.delicious.com/recent/javascript">Delicious</a><br />
<a href="https://github.com/languages/JavaScript">Github</a><br />
Reddit: <a href="http://www.reddit.com/r/web_design/">web_design</a> and <a href="http://www.reddit.com/r/javascript/">javascript</a><br />
<a href="http://groups.google.com/group/jsmentors">JSMentors</a></p>

<h3 id="blogs">Blogs</h3>

<p><a href="http://www.google.com/reader/bundle/user%2F00060481582380134484%2Fbundle%2FJavaScript">JavaScript Google Reader bundle</a><br />
<a href="http://www.google.com/reader/bundle/user%2F00060481582380134484%2Fbundle%2FJavaScript%20People">JavaScript People Blogs – Google Reader bundle</a></p>

<p><a href="http://hacks.mozilla.org/articles/">Mozilla articles on hacks.mozilla.org</a><br />
<a href="http://msdn.microsoft.com/en-us/scriptjunkie/">Script Junkie</a><br />
<a href="http://dailyjs.com/">DailyJS</a> – very frequently updated news by Alex Young<br />
<a href="http://www.quirksmode.org/blog/">QuirksBlog (ppk)</a> – focus on mobile<br />
<a href="http://javascriptweblog.wordpress.com/">JavaScript, JavaScript (Angus Croll)</a><br />
<a href="http://ejohn.org/category/blog/">John Resig’s blog</a> – unfortunately not too active lately (check out <a href="http://twitter.com/#!/jeresig">his Twitter</a> for more updated info)<br />
<a href="http://ajaxian.com/">Ajaxian</a> – used to be THE source for news, but it isn’t updated too much anymore</p>

<p>…and many more. Check out <a href="http://blog.reybango.com/2010/12/15/what-to-read-to-get-up-to-speed-in-javascript/">Rey Bango’s “What to Read to Get Up to Speed in JavaScript”</a> for more.</p>

<h3 id="browser-blogs">Browser blogs</h3>

<p>It’s important to know what’s going down in the browser world. These have mixed content, so it’s not just JavaScript.</p>

<p><a href="http://webkit.org/blog/">Surfin’ Safari</a><br />
<a href="http://blog.chromium.org/">The Chromium Blog</a><br />
<a href="http://blog.mozilla.com/">The Mozilla Blog</a></p>

<h3 id="weekly-news">Weekly news</h3>

<p>These sources attempt to do the legwork for you and round up the most important articles each week. (Disclaimer: I currently write for JSMag!)</p>

<p><a href="http://javascriptweekly.com/">JavaScript Weekly</a>: a weekly email newsletter<br />
<a href="http://badassjs.com/">Badass JS</a><br />
<a href="http://jsmag.com/blog/">JSMag blog</a></p>

<h3 id="podcasts-and-videos">Podcasts and Videos</h3>

<p><a href="http://www.aminutewithbrendan.com/">A Minute With Brendan</a><br />
<a href="http://node.minutewith.com/">node.minutewith</a><br />
<a href="http://developer.yahoo.com/yui/theater/">YUI Theatre</a><br />
<a href="http://nodeup.com/">Node Up</a></p>

<p>Am I missing anything (I’m very sure)? Post a link below in the comments. Thanks!</p>

]]></content>
  </entry>
  
</feed>
