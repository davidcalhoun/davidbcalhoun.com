<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apple | David Calhoun]]></title>
  <link href="http://davidbcalhoun.com/blog/categories/apple/atom.xml" rel="self"/>
  <link href="http://davidbcalhoun.com/"/>
  <updated>2017-03-11T11:38:47-08:00</updated>
  <id>http://davidbcalhoun.com/</id>
  <author>
    <name><![CDATA[David Calhoun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Initial thoughts on the Retina MacBook Pro (after a few minutes at the store)]]></title>
    <link href="http://davidbcalhoun.com/2012/initial-thoughts-on-the-retina-macbook-pro-after-a-few-minutes-at-the-store"/>
    <updated>2012-06-19T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2012/initial-thoughts-on-the-retina-macbook-pro-after-a-few-minutes-at-the-store</id>
    <content type="html"><![CDATA[<p>After work today, I stopped by the old bustling Apple Store in Palo Alto. I was there for a bit of a peek at what my next blank check to Apple would bring me.</p>

<p>I was between tables going back and forth between the updated MacBook Pro (non-retina) and the Retina MacBook Pro and came away with some initial impressions. I couldn’t find these sort of “impartial” impressions elsewhere, so I thought I’d record these impressions for myself.</p>

<h3 id="prima-facie">Prima facie</h3>

<p>Initial thoughts: the screen seemed to be slightly more crisp, especially the icons in the dock. However, the form factor made more of an impression than the screen: the laptop is significantly lighter than previous models I’ve used (for the record, I use a late 2008 MBP at home, and have been using newer MacBook Pros for work purposes). I picked up the laptop expecting it to be nearly as heavy as what I’m used to, and overcompensated when lifting it up. That’s a good thing.</p>

<p>The lady at the store opened up iPhoto and showed me a few photos. It seemed to be crisper, but nothing like the noticeable difference when I upgraded from an iPhone 3GS to an iPhone 4S. She also opened up the Apple homepage on the Retina display and on a non-Retina, and pointed out a specific piece of text. In this case it was text in a graphic. We had to shuffle back and forth in order to be convinced. In this case we were actually looking at the text on a graphic on the Apple site):</p>

<p><a href="http://images.apple.com/home/images/macbookpro_title.png"><img src="http://davidbcalhoun.com/wp-content/uploads/2012/06/non-retina.png" alt="Non-retina text" title="Non-retina text" width="374" height="124" class="aligncenter size-full wp-image-905" /></a></p>

<p><a href="http://images.apple.com/home/images/macbookpro_title_2x.png"><img src="http://davidbcalhoun.com/wp-content/uploads/2012/06/retina.png" alt="Retina text" title="Retina text" width="748" height="248" class="aligncenter size-full wp-image-906" /></a></p>

<p>Non-retina (top) and Retina (bottom) graphics at native resolution.</p>

<p>(technical note: the Retina version is served via JavaScript – see <a href="http://blog.cloudfour.com/how-apple-com-will-serve-retina-images-to-new-ipads/">http://blog.cloudfour.com/how-apple-com-will-serve-retina-images-to-new-ipads/</a>)</p>

<h3 id="good-for-photo-editing">Good for photo editing?</h3>

<p>The differences in the text and dock icons was easier to see than the difference between photos in iPhoto. As an amateur photographer, I’m unsure if this makes a difference. When editing photos, instead of zooming my head closer to the screen I end up leaving my head stationary and zooming with controls in the photo editing program I use. The Retina screen makes the experience a bit nicer, but obviously isn’t a requirement for producing good detailed photos. For photographers, I think there’s an apt analogy. The Retina screen is kind of like an expensive lens: it definitely help, but it won’t guarantee good photos, and not all good photos are necessarily taken with good lenses.</p>

<h3 id="application-support-or-lack-thereof">Application support (or lack thereof)</h3>

<p>One thing that was also evident is that not everything is ready for the Retina screen. Photoshop surprisingly didn’t support it, even though the saleslady mentioned they had an early look at the Retina MacBook Pro. Surprisingly, not even the Apple Store greeting/icons on the demo mode laptops was ready for the screen (it was visibly pixelated).</p>

<p>The guy next to me predictably loaded up Microsoft Word and complained about it looking ugly (apparently he got the memo and wanted to act surprised). Like other programs, it’s just a matter of time until they fix it. Whatever, I can deal with that.</p>

<p>I tried to load up YouTube in Safari, but I didn’t have a good 1080p video to test (for the record, I tried this one, which doesn’t look too great at 1080p: <a href="http://www.youtube.com/watch?v=pjC72RIDt_A">http://www.youtube.com/watch?v=pjC72RIDt_A</a>). I’ll have to try again later.</p>

<h3 id="testing-out-different-viewing-distances">Testing out different viewing distances</h3>

<p>Lastly, I tried several viewing distance tests. I found that at my normal viewing distance (sorry I don’t have measurements) I could definitely tell that things were a little sharper, but again, the difference was slight. As I moved back, it didn’t take long for the difference to be indiscernible compared to the non-Retina screen. Starting again from normal viewing distance, the closer I got, the easier it was to tell that it was a “Retina” screen. In my mind, there’s a logical reason “Retina” came first to the iPhone, then the iPad, and now the MacBook Pro, in that order. It simply becomes less discernable at longer viewing distances.</p>

<h3 id="afterthoughts-impact-on-web-development">Afterthoughts: impact on web development?</h3>

<p>At least on my initial impression, it didn’t seem that the new Retina screen necessitated too much of a change in websites offering higher-resolution graphics. They can get along just fine not upgrading, but I suppose folks will enjoy high-res graphics when they see it.</p>

<p>It’s now been a few years after the iPhone 4 was released, and years since high pixel density Android phones have been on the market, and I still still see noticeably blurry graphics on mobile sites. Hopefully at the greater viewing distance afforded by the MacBook Pro, there will be less of a shock at seeing the contrast between sharp text and a blurry photo. Perhaps a laptop is a nice compromise: good enough to enjoy “Retina” graphics where supported, but not too distracting when graphics aren’t optimized for the high pixel density.</p>

<h3 id="tldr-too-long-didn8217t-read">TLDR (Too long, didn’t read)</h3>

<p>TLDR/Conclusion: the light form factor was more of a sell for me than the Retina screen. Though the Retina screen is nice, it’s hard to justify the purchase on that alone. However, the purchase becomes justified when coupled with a nice processor bump and nice form factor. Since I’ve been waiting to upgrade for a while, it’s only a matter of time before I get one. But as I don’t NEED one yet, I’ll wait until prices drop a bit (as they always do).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PastryKit: digging into an Apple Pie]]></title>
    <link href="http://davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie"/>
    <updated>2009-12-16T00:00:00-08:00</updated>
    <id>http://davidbcalhoun.com/2009/pastrykit-digging-into-an-apple-pie</id>
    <content type="html"><![CDATA[<p>Yesterday <a href="http://daringfireball.net/2009/12/pastrykit">John Gruber wrote about Apple’s PastryKit</a>, iPhone’s JavaScript framework that’s been discovered “in the wild” on the iPhone user guide at <a href="http://help.apple.com/iphone/3/mobile/">http://help.apple.com/iphone/3/mobile/</a>. There’s a few ways to access the page:</p>

<ul>
  <li>with an actual iPhone or iTouch</li>
  <li>by browsing with an iPhone/iTouch user agent. If you’re using Safari, enable the Developer menu in Safari&gt;Preferences&gt;Advanced and switching user agents by clicking on Develope&gt;User Agent</li>
</ul>

<h3 id="what8217s-all-the-big-fuss">What’s all the big fuss?</h3>

<p>John was particularly interested in the responsiveness and native-like interaction of flinging through long lists, the fact the address bar is completely hidden, and the possibility of having a toolbar fixed to the top of the page. PastryKit makes all of these things possible and implements them better than anything else. And the result is nearly indistinguishable from a native app. Here’s a video I made of the iPhone user guide in action, powered by PastryKit. This is running on Safari – it’s not a native app!</p>

<div style="align: center; margin: 1em auto; width: 640px;">
</div>

<h3 id="pastrykit-has-been-here-for-a-while">PastryKit has been here for a while</h3>

<p>As John Gruber points out, the code for PastryKit has been there for quite a while now. <a href="http://stackoverflow.com/questions/1143589/what-is-the-pastrykit-framework">Stack Overflow has a question about it</a> that was asked way back in July, and there are several more <a href="http://twitter.com/jQTouch/status/6146839190">recent references</a> to it by jQTouch developer David Kaneda on Twitter. Of course, since John’s post there’s been an explosion of interest in the form of even more tweets!</p>

<p>Hopefully with all of this increased attention, we’ll see Apple take notice and address it. Here’s hoping, anyway.</p>

<h3 id="some-interesting-features">Some interesting features</h3>

<p>There’s even more interesting takeaways from the PastryKit code, and I’m sure I’ve just barely scratched the surface:</p>

<ul>
  <li>implements its own form of Object-Oriented programming (obj.inherits and obj.synthetizes properties). When modules are declared, they’re registered as a PK Class (i.e. PKClass(PKBarButtonItem) registers PKBarButtonItem as a PK Class)</li>
  <li>CSS3 wrapper functions (PKUtils.t() is a wrapper for translate3d, etc.)</li>
  <li>no single library namespace (surprisingly) – which means there are many many global variables. This however is somewhat acceptable, as all variables are prefixed with “PK” and are declared to be constant (const PKStartEvent, const PKEndEvent) and cannot be overwritten.</li>
</ul>

<p>There’s also some interesting takeaways not from PastryKit itself, but from the way the iPhone user guide is implemented. Most of the data on the page – including each menu icon (base64 encoded) – is located in a single 650kb JSON-encoded file called content.json. This means the initial loading of the page is quite slower than the user would normally expect, but once the initial payload has been delivered, it’s a relatively smooth browsing experience thereafter.</p>

<p>And as John Gruber already pointed out, this data is stored locally with the help of HTML5, allowing the user to continue reading even while offline!</p>

<div id="attachment_75" style="width: 329px" class="wp-caption aligncenter">
  <img src="http://davidbcalhoun.com/wp-content/uploads/2009/12/apple-pastrykit.png" alt="iPhone user guide in Safari" title="iPhone user guide in Safari" width="319" height="480" class="size-full wp-image-75" /><p class="wp-caption-text">
    iPhone user guide in Safari
  </p>
</div>

<h3 id="pastrykit-unminified-and-explained-sorta">PastryKit unminified and explained (sorta)</h3>

<p>What I’m excited to show you now is a result of a bit of effort to make PastryKit more intelligible. Though there’s a <a href="http://help.apple.com/iphone/3/mobile/dist/PastryKit-ug-compact.js">minified version of the code</a> on Apple’s website, it’s not obfuscated (and rendered unintelligible), so not all hope is lost! With the help of <a href="http://jsbeautifier.org/">jsbeautifier.org</a> we can now see the slightly unminified version of the code: <a href="http://davidbcalhoun.com/pastrykit/PastryKit.js">PastryKit.js unminified</a>.</p>

<p>The next thing I did was separate each module into its own file. I was able to separate the code into 27 numbered files, with the original ordering preserved (to prevent issues with dependencies). Viewing the code in this way definitely helps make sense of it all. You can download these separate files as part of a little unofficial SDK I made, which also includes a copy of the iPhone user guide with the JS iPhone-only redirect removed: <a href="http://davidbcalhoun.com/pastrykit/pastrykit-sdk.zip">PastryKit unofficial SDK</a>.</p>

<h3 id="pastrykit-modules">PastryKit modules</h3>

<p>The following is an explanation of each module I found. The descriptions are definitely incomplete and possibly inaccurate, so any comments or help is appreciated. But this should hopefully shed some light on the matter!</p>

<ul>
  <li>PKUtils – general helper functions (PKUtils.t() is a wrapper for CSS translate3d, PKUtils.degreesToRadians(), etc, etc.)</li>
  <li>PKEventTriage – general event handler</li>
  <li>PKPropertyTriage – handlePropertyChange() method – ?</li>
  <li>Element – helper functions added to HTML Element prototype</li>
  <li>Node – adds getNearestView() method to HTML Node prototype</li>
  <li>PKClass – custom-rolled class with with “inherits” and “synthetizes” properties</li>
  <li>PKObject – custom-rolled object with observer pattern. Most modules extend from this.</li>
  <li>PKPoint – wrapper for WebKitPoint – used for touch events?</li>
  <li>PKSize – wrapper for width/height properties</li>
  <li>PKImage (inherits PKObject) – helper for creating Image elements and knowing when it’s finished loading (but doesn’t add the image to the DOM)</li>
  <li>PKAnimator – basic animation tweens</li>
  <li>PKTransition – helper for proprietary Webkit CSS transitions</li>
  <li>PKTransaction – interacts with PKTransition – ?</li>
  <li>PKView (extends PKObject) – manages a view, such as handling events that occur within that view – ?</li>
  <li>PKContentView (extends PKView) – ?</li>
  <li>PKRootView (extends PKContentView) – ?</li>
  <li>PKScrollIndicator (extends PKView) – custom scrollbar</li>
  <li>PKScrollView (extends PKView) – handles dynamically positioning the page when it’s scrolled</li>
  <li>PKTableView (extends PKScrollView) – handles more touch/scroll events?</li>
  <li>PKCellPath – ?</li>
  <li>PKTableViewCell (extends PKView) – ?</li>
  <li>PKToolbar (extends PKView) – manages the top toolbar</li>
  <li>PKNavigationView (extends PKView) – manages bottom navigation bar</li>
  <li>PKNavigationItem (extends PKObject) – manages bottom navigation buttons</li>
  <li>PKControl (extends PKView) – manages generic controls</li>
  <li>PKBarButtonItem (extends PKControl) – manages button controls</li>
  <li>PKSearchBar.js (extends PKView) – manages the search bar</li>
</ul>

<h3 id="conclusion-after-a-first-glance">Conclusion after a first glance</h3>

<p>As far as I can tell, this is no full-fledged JavaScript library. At least not for now.</p>

<p>On first glance PastryKit seems to be at most a nice development framework for making web apps with the same look-and-feel of native iPhone apps. And this framework in many ways does this better than anything out there (at the moment).</p>

<p>I echo the sentiments of Gruber – I do hope we hear more about this from Apple!</p>

]]></content>
  </entry>
  
</feed>
