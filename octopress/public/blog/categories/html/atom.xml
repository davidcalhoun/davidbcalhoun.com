<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | David Calhoun]]></title>
  <link href="http://davidbcalhoun.com/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://davidbcalhoun.com/"/>
  <updated>2016-11-22T14:17:40-08:00</updated>
  <id>http://davidbcalhoun.com/</id>
  <author>
    <name><![CDATA[David Calhoun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top ten things HTML5 makes simpler]]></title>
    <link href="http://davidbcalhoun.com/2010/top-ten-things-html5-makes-simpler"/>
    <updated>2010-10-07T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2010/top-ten-things-html5-makes-simpler</id>
    <content type="html"><![CDATA[<p><b>General word of caution: not all of these HTML5 simplifications are compatible with older browsers.  Test it for yourself before implementing!</b></p>
<h3>1. The doctype</h3>
<p>The old:</p>
<pre name="code" class="html">
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;
&quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
</pre>
<p>The new:</p>
<pre name="code" class="html">
&lt;!DOCTYPE html&gt;
</pre>
<h3>2. charset</h3>
<p>The old:</p>
<pre name="code" class="html">
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
</pre>
<p>The new:</p>
<pre name="code" class="html">
&lt;meta charset=&quot;utf-8&quot;&gt;
</pre>
<h3>3. The link tag&#8217;s
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">type</div></td></tr></tbody></table></div>
<p>attribute
<p>The old:</p>
<pre name="code" class="html">
&lt;link href=&quot;style.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;
</pre>
<p>The new (omit the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">type</div></td></tr></tbody></table></div>
<p>attribute):</p>
<pre name="code" class="html">
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;
</pre>
<p>This one may be a bit controversial, but the HTML5 spec actually tells browser vendors not to treat the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">type</div></td></tr></tbody></table></div>
<p>attribute as the final word, which makes it seem pretty redundant:</p>
<blockquote><p>User agents must not consider the type attribute authoritative — upon fetching the resource, user agents must not use the type attribute to determine its actual type. Only the actual type (as defined in the next paragraph) is used to determine whether to apply the resource, not the aforementioned assumed type. -<a href="http://dev.w3.org/html5/spec/Overview.html#the-link-element">W3C HTML5 spec</a></p></blockquote>
<p>The spec then goes on to state that the browser must effectively determine the type by examining the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">Content-Type</div></td></tr></tbody></table></div>
<p>sent back in the header from the server when requesting the CSS file.  If this extra work is already being performed and there&#8217;s no noticeable downside of omitting the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">type</div></td></tr></tbody></table></div>
<p>attribute, then it seems pretty redundant.  Save the extra bytes by omitting it!</p>
<h3>4. The script tag&#8217;s
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">type</div></td></tr></tbody></table></div>
<p>attribute
<p>The old:</p>
<pre name="code" class="html">
&lt;script src=&quot;script.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
</pre>
<p>The new:</p>
<pre name="code" class="html">
&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;
</pre>
<p>According the the W3C, if the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">type</div></td></tr></tbody></table></div>
<p>attribute isn&#8217;t present, it should default to</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">text/javascript</div></td></tr></tbody></table></div>
<p>:</p>
<blockquote><p>The type attribute gives the language of the script or format of the data. If the attribute is present, its value must be a valid MIME type. The charset parameter must not be specified. <b>The default, which is used if the attribute is absent, is &#8220;text/javascript&#8221;.</b><a href="http://dev.w3.org/html5/spec/Overview.html#script">-W3C HTML5 spec</a></p></blockquote>
<h3>5. The script tag&#8217;s
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">async</div></td></tr></tbody></table></div>
<p>and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">defer</div></td></tr></tbody></table></div>
<p>attributes
<p>Moving scripts to the bottom of a document is <a href="http://developer.yahoo.com/performance/">one of the top performance tips</a> and one of the easiest ways to speed up a website.  This is because script downloading (in older browsers) and parsing/executing is done synchronously, that is, in a way which blocks everything else which comes after them.  </p>
<p>It&#8217;s not too hard to move the scripts to the bottom, but wouldn&#8217;t it be handy if there was an attribute we could add on the script to make it behave, no matter where it&#8217;s located?  Now there is!  Check out the async attribute:</p>
<pre name="code" class="html">
&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;
</pre>
<p>This tells the browser to download and execute the script asynchronously, without blocking the rendering of elements below it.  There&#8217;s one catch: scripts with this attribute aren&#8217;t guaranteed to run in the order they appear in the document, which is their default behavior when the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">async</div></td></tr></tbody></table></div>
<p>attribute isn&#8217;t present.  So be careful or this will definitely lead to code dependency issues.</p>
<p>The</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">defer</div></td></tr></tbody></table></div>
<p>attribute is an older attribute with a similar goal:</p>
<pre name="code" class="html">
&lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;
</pre>
<p>Believe it or not, this attribute was first implemented in IE4!  It tells the browser the same thing: to download and execute the script in such a way that it doesn&#8217;t block the elements below it from rendering.  The difference from</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">async</div></td></tr></tbody></table></div>
<p>is that</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">defer</div></td></tr></tbody></table></div>
<p>executes the scripts in the order they appear in the document.</p>
<h3>6. placeholder and autofocus attributes</h3>
<p>The</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">placeholder</div></td></tr></tbody></table></div>
<p>attribute can be added to</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">input</div></td></tr></tbody></table></div>
<p>and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">textarea</div></td></tr></tbody></table></div>
<p>elements.  This is a piece of interaction that was originally accomplished with a bit of JavaScript: placeholder text (usually gray in appearance) appears in a text field, but disappears when the user focuses on it (and reappears if the user moves focus without typing any text).</p>
<pre name="code" class="html">
&lt;input type=&quot;text&quot; placeholder=&quot;Search&quot;&gt;
&lt;textarea type=&quot;text&quot; placeholder=&quot;Search&quot;&gt;&lt;/textarea&gt;
</pre>
<p>Similarly, the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">autofocus</div></td></tr></tbody></table></div>
<p>attribute creates some interaction that was originally developed with JavaScript: when the page loads, focus on a specified form element.  Now all you have to do is add the attribute to make the same thing work with without JavaScript!  The</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">autofocus</div></td></tr></tbody></table></div>
<p>tag can be added to</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">input</div></td></tr></tbody></table></div>
<p>,</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">select</div></td></tr></tbody></table></div>
<p>,</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">textarea</div></td></tr></tbody></table></div>
<p>, and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">button</div></td></tr></tbody></table></div>
<p>tags:</p>
<pre name="code" class="html">
&lt;input type=&quot;text&quot; autofocus&gt;&lt;/input&gt;
</pre>
<h3>7. JavaScript: localStorage and sessionStorage</h3>
<p>When coding JavaScript, instead of having to deal with cookies, which are quite limiting in terms of storage space, you now have the option to use</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">localStorage</div></td></tr></tbody></table></div>
<p>and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">sessionStorage</div></td></tr></tbody></table></div>
<p>.  The size limit may depend on the browser, but it seems to have been set at a minimum of 5mb per domain.  It may also be the case that the size limit for sessionStorage may be larger (which <a href="http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/1fe562b8-1a16-42ca-a02f-280630958bcc">seems to be the case for IE8 and possibly IE9</a>).</p>
<p>It should be noted, if it wasn&#8217;t immediately obvious from their names, that</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">localStorage</div></td></tr></tbody></table></div>
<p>data persists across sessions (just like cookies) and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">sessionStorage</div></td></tr></tbody></table></div>
<p>data persists only for the length of the browser session.</p>
<p>It should also be noted that data can only be stored in this way in key-value pairs, where the values can only be strings.  This presents a problem when trying to store JSON objects, and requires you to go through the extra step of using JSON.stringify(myObj) before storing your data.</p>
<p>Here&#8217;s an example of how easy it is to use</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">localStorage</div></td></tr></tbody></table></div>
<p>and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">sessionStorage</div></td></tr></tbody></table></div>
<p>:</p>
<pre name="code" class="JScript">
// localStorage - data can be retrieved by the site after user closes the browser!
localStorage.userName = "Biff Tannen";

// sessionStorage - data only persists for the current session
sessionStorage.userMood = "Angry";
</pre>
<h3>8. Caching</h3>
<p>Traditionally, you could only control caching on your website through primarily headers (Cache-Control and Expires headers).  Now through the use of the <a href="http://diveintohtml5.org/offline.html">cache manifest</a>, developers have more control over which components they want to be cached.  Theoretically, controlling this caching is now as easy as changing one file (instead of having to change server configurations and such).</p>
<p>Setting up the cache manifest is relatively easy:</p>
<p>1. Add this line to your</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">.htaccess</div></td></tr></tbody></table></div>
<p>file or Apache configuration:</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">AddType text/cache-manifest .manifest</div></td></tr></tbody></table></div>
<p>2. Create a file.  For this example we&#8217;ll call it</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">cache.manifest</div></td></tr></tbody></table></div>
<p>.  This file contains a list of files that should be cached:</p>
<pre>
CACHE MANIFEST
# version 1
/style.css
/script.js
/image.jpg
</pre>
<p>3. Add the manifest attribute on the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">html</div></td></tr></tbody></table></div>
<p>element, pointing to your</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">cache.manifest</div></td></tr></tbody></table></div>
<p>file:</p>
<pre name="code" class="html">
&lt;html manifest=&quot;/cache.manifest&quot;&gt;
</pre>
<p>Now these files specified will be cached.  They will only be redownloaded if our</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">cache.manifest</div></td></tr></tbody></table></div>
<p>file is changed in any way.  That&#8217;s why there&#8217;s a comment with the version number.  Simply update the version to force the browser to redownload the files:</p>
<pre>
CACHE MANIFEST
# version 2
/style.css
/script.js
/image.jpg
</pre>
<h3>9. Form input validation</h3>
<p>HTML5 has a ton of new features for forms, one of which is handy form validation which requires no JavaScript.  In the days before Ajax, form validation was perhaps the most useful feature of JavaScript, giving developers the ability to prevent unnecessary roundtrips to the server for forms with incomplete or invalid data.</p>
<p>Now you can use the</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">required</div></td></tr></tbody></table></div>
<p>attribute to make sure a particular input is filled out.  The browser won&#8217;t send the form without the completed input:</p>
<pre name="code" class="html">
&lt;input type=&quot;text&quot; name=&quot;email&quot; required&gt;
</pre>
<p>There&#8217;s much more to be said about improvements to forms in general, in addition to some other handy form validation tools such as the <a href="http://dev.w3.org/html5/spec/Overview.html#the-min-and-max-attributes">
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">min</div></td></tr></tbody></table></div>
<p>and</p>
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">max</div></td></tr></tbody></table></div>
<p>attributes and the <a href="http://dev.w3.org/html5/spec/Overview.html#the-placeholder-attribute">
<div class="codecolorer-container text twitlight" style="overflow:auto;white-space:nowrap;width:435px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br /></div></td><td><div class="text codecolorer">pattern</div></td></tr></tbody></table></div>
<p>attribute.</p>
<h3>10. Video (and <a href="http://html5doctor.com/native-audio-in-the-browser/">audio</a>)</h3>
<p>The old (common example using a Flash container in an object):</p>
<pre name="code" class="html">
&lt;object width=&quot;500&quot; height=&quot;350&quot;&gt;
  &lt;param name=&quot;movie&quot; value=&quot;flashcontainer.swf&quot;&gt;
  &lt;embed src=&quot;flashcontainer.swf&quot; width=&quot;500&quot; height=&quot;350&quot;&gt;
  &lt;/embed&gt;
&lt;/object&gt;
</pre>
<p>The new:</p>
<pre name="code" class="html">
&lt;video id=&quot;movie&quot; width=&quot;500&quot; height=&quot;350&quot; controls&gt;
  &lt;source src=&quot;movie.mp4&quot; /&gt;
  &lt;source src=&quot;movie.webm&quot; type=&#x27;video/webm; codecs=&quot;vp8, vorbis&quot;&#x27; /&gt;
  &lt;source src=&quot;movie.ogv&quot; type=&#x27;video/ogg; codecs=&quot;theora, vorbis&quot;&#x27; /&gt;
&lt;/video&gt;
</pre>
<p>Ok, so the simplicity of this one is the most debatable.  The thing that&#8217;s tricky about this is that you have to encode the movie into several different formats, because of the differing implementations on browsers out there.</p>
<p>Also, here&#8217;s an example with a Flash fallback (read more <a href="http://diveintohtml5.org/video.html">here</a>):</p>
<pre name="code" class="html">
&lt;video id=&quot;movie&quot; width=&quot;500&quot; height=&quot;350&quot; controls&gt;
  &lt;source src=&quot;movie.mp4&quot; /&gt;
  &lt;source src=&quot;movie.webm&quot; type=&#x27;video/webm; codecs=&quot;vp8, vorbis&quot;&#x27; /&gt;
  &lt;source src=&quot;movie.ogv&quot; type=&#x27;video/ogg; codecs=&quot;theora, vorbis&quot;&#x27; /&gt;
  &lt;object width=&quot;500&quot; height=&quot;350&quot;&gt;
    &lt;param name=&quot;movie&quot; value=&quot;flashcontainer.swf&quot;&gt;
    &lt;embed src=&quot;flashcontainer.swf&quot; width=&quot;500&quot; height=&quot;350&quot;&gt;
    &lt;/embed&gt;
  &lt;/object&gt;
&lt;/video&gt;
</pre>
<h3>Related</h3>
<p><a href="http://davidbcalhoun.com/2010/basic-html5-template">Basic HTML5 template</a><br />
<a href="http://www.w3.org/TR/html5-diff/">W3C: HTML5 differences</a></p>
</a></p></a></p></p></h3></p></h3></p></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic HTML5 template]]></title>
    <link href="http://davidbcalhoun.com/2010/basic-html5-template"/>
    <updated>2010-09-08T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2010/basic-html5-template</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>Often times I end up creating short pages for testing short pieces of code, and I only need a very basic HTML template to write in. Short of using <a href="http://html5boilerplate.com/">HTML5 Boilerplate</a>, I just use a quick piece of code like the following. (note: yes, this has issues in IE, so you may want to use <a href="http://remysharp.com/2009/01/07/html5-enabling-script/">HTML5 Shiv/Shim</a>)</p>

<h3 id="the-code">The code</h3>

<pre name="code" class="html">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"/&gt;
  &lt;title&gt;&lt;/title&gt;

  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0"/&gt;
  &lt;link rel="stylesheet" href=""/&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;header&gt;
  &lt;/header&gt;

  &lt;div&gt;
  &lt;/div&gt;

  &lt;footer&gt;
  &lt;/footer&gt;

  &lt;script src=""&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</pre>

<p>Edit: Self-closed tags for compatibility.  <br />
Edit2: removed type=”text/css” from the link tag</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using mobile-specific HTML, CSS, and JavaScript (Mobile web part 5)]]></title>
    <link href="http://davidbcalhoun.com/2010/using-mobile-specific-html-css-javascript"/>
    <updated>2010-06-29T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2010/using-mobile-specific-html-css-javascript</id>
    <content type="html"><![CDATA[<p><em>(updated June 27, 2011)</em></p>

<h3 id="mobile-specific-html">Mobile-specific HTML</h3>

<h4 id="viewport-tag">Viewport tag</h4>

<p>Use the <a href="http://davidbcalhoun.com/2010/viewport-metatag">viewport tag</a> to properly fit the content to the screen:</p>

<pre><code class="language-html">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"/&gt;
</code></pre>

<h4 id="tel-scheme2-to-initiate-phone-calls"><a href="http://www.rfc-editor.org/rfc/rfc3966.txt">Tel scheme</a> (to initiate phone calls)</h4>

<pre><code class="language-html">    &lt;a href="tel:18005555555"&gt;Call us at 1-800-555-5555&lt;/a&gt;
</code></pre>

<h4 id="sms-scheme3-to-initiate-text-messages"><a href="http://www.rfc-editor.org/rfc/rfc5724.txt">Sms scheme</a> (to initiate text messages)</h4>

<pre><code class="language-html">    &lt;a href="sms:18005555555"&gt;
    &lt;a href="sms:18005555555,18005555556"&gt;                &lt;!-- multiple recipients --&gt;
    &lt;a href="sms:18005555555?body=Text%20goes%20here"&gt;    &lt;!-- predefined message body --&gt;
</code></pre>

<h4 id="disable-automatic-telephone-number-linking">Disable automatic telephone number linking</h4>

<pre><code class="language-html">    &lt;meta name="format-detection" content="telephone=no"&gt;
</code></pre>

<h4 id="ios-specific-html-some-work-on-android-as-well">iOS-specific HTML (some work on Android as well)</h4>

<p>You also have access to several <a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/configuringwebapplications/configuringwebapplications.html">Apple-specific tags to use in your iOS applications (iPhone, iPad, and don’t forget the iPod Touch!)</a>.</p>

<pre><code class="language-html">    &lt;!-- iOS 1.1.3+: this is the icon that's used when the user adds your app to the home screen --&gt;

    &lt;!-- also works on Android! --&gt;
    &lt;link rel="apple-touch-icon" href="icon.png" /&gt;

    &lt;!-- iOS 2.0+: tell iOS not to apply any glare effects to the icon --&gt;
    &lt;link rel="apple-touch-icon-precomposed" href="icon.png" /&gt;

    &lt;!-- iOS 4.2+ icons for different resolutions --&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="touch-icon-ipad.png" /&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="touch-icon-iphone4.png" /&gt;

    &lt;!-- iOS 3+: full-screen startup splash screen image (must be 320x460) --&gt;
    &lt;link rel="apple-touch-startup-image" href="startup.png" /&gt;

    &lt;!-- enable full-screen mode (only when launched from home screen) --&gt;
    &lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt;

    &lt;!-- controls the appearance of the status bar in full-screen mode --&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black" /&gt;
</code></pre>

<h4 id="turn-off-autocorrect-autocomplete-and-autocapitalize">Turn off autocorrect, autocomplete, and autocapitalize</h4>

<p>And also some handy attributes to turn off annoying autocorrect features:</p>

<pre><code class="language-html">    &lt;input autocorrect="off" autocomplete="off" autocapitalize="off"&gt;
</code></pre>

<h3 id="mobile-specific-css">Mobile-specific CSS</h3>

<h4 id="positionfixed-and-overflowscroll">position:fixed and overflow:scroll</h4>

<p>Mobile browsers are now starting to support these basic CSS properties better. Position:fixed will work on Android 2.2+ and iOS 5+. Overflow:scroll works with one finger on iOS 5+.</p>

<p>Also, iOS 5 has additional CSS to give the native scrollbar and momentum/intertia to elements with overflow:scroll:</p>

<pre><code class="language-css">    div {
      -webkit-overflow-scrolling: touch;
    }
</code></pre>

<h4 id="media-queries">Media queries</h4>

<p><a href="http://www.w3.org/TR/css3-mediaqueries/">Media queries</a> enable you to target specific features (screen width, orientation, resolution) within CSS itself. Media queries themselves are actually quite old and are not mobile specific (they used to be popular for making a print-friendly version of webpages).</p>

<p>You can use them two ways: 1) inline in a CSS stylesheet or 2) as the “media” attribute in the link tag, which loads an external stylesheet. The following is an example of inline CSS that’s applied only when the device is in portrait mode:</p>

<pre><code class="language-css">    @media all and (orientation: portrait) {
      body { }
      div { }
    }
</code></pre>

<p>Here’s the same media query using the other method, which points to an external stylesheet (not recommended):</p>

<pre><code class="language-html">    &lt;link rel="stylesheet" media="all and (orientation: portrait)" href="portrait.css" /&gt;
</code></pre>

<p>This is not recommended because it creates an additional HTTP request (bad for performance). Also, in the case of screen orientation, the separate CSS stylesheet is NOT downloaded when the screen is rotated.</p>

<p>Here’s a few examples of using inline CSS:</p>

<pre><code class="language-css">    // target small screens (mobile devices or small desktop windows)
    @media only screen and (max-width: 480px) {
      /* CSS goes here */
    }

    /* high resolution screens */
    @media (-webkit-min-device-pixel-ratio: 2),
                 (min--moz-device-pixel-ratio: 2),
                 (min-resolution: 300dpi) {
      header { background-image: url(header-highres.png); }
    }

    /* low resolution screens */
    @media (-webkit-max-device-pixel-ratio: 1.5),
                 (max--moz-device-pixel-ratio: 1.5),
                 (max-resolution: 299dpi) {
      header { background-image: url(header-lowres.png); }
    }
</code></pre>

<p>Read more: <a href="https://developer.mozilla.org/en/css/media_queries">Media queries (Mozilla Developer Center)</a></p>

<h4 id="miscellaneous-css">Miscellaneous CSS</h4>

<ul>
  <li>
    <p><code>-webkit-tap-highlight-color</code> (iOS): override the semitransparent color overlay when a user clicks a link or clickable element. To completely disable it, set the value to ‘transparent’ or ‘rgba(0,0,0,0)’</p>
  </li>
  <li>
    <p><code>-webkit-user-select: none;</code> - prevent the user from selecting text (also works on desktop WebKit)</p>
  </li>
  <li>
    <p><code>-webkit-touch-callout: none;</code> - prevent the callout toolbar from appearing when a user touches and holds an element such as an anchor tag.</p>
  </li>
</ul>

<h3 id="mobile-specific-javascript">Mobile-specific JavaScript</h3>

<h4 id="windowscrollto00"><code>window.scrollTo(0,0);</code></h4>

<p>This hides the address bar and takes advantage of the entire device screen. You’ll have to set this in a timeout and make sure to get the timing right. See <a href="http://remysharp.com/2010/08/05/doing-it-right-skipping-the-iphone-url-bar/">Remy Sharp’s post</a> for more details.</p>

<h4 id="windowmatchmedia"><code>window.matchMedia()</code></h4>

<p>(iOS 5+) Again, just as CSS media queries aren’t specific to mobile, they do come in especially useful for mobile, so it’s worth mentioning their JavaScript counterpart. window.matchMedia() is a JavaScript-based version of media queries. You can use <a href="https://github.com/scottjehl/Respond">respond.js</a> as a polyfill for devices that don’t support this functionality natively.</p>

<h4 id="navigatorconnection"><code>navigator.connection</code></h4>

<p>(Android 2.2+) Determine if the phone is running on WiFi, 3G, etc. Example:</p>

<pre><code class="language-javascript">    if (navigator.connection.type==navigator.connection.WIFI) {
      // code for WiFi connections (high-bandwidth)
    }
</code></pre>

<h4 id="windowdevicepixelratio"><code>window.devicePixelRatio</code></h4>

<p>Determine screen resolution (analogue to the CSS media query). (iPhone 4 has the value 2, while Nexus One has the value 1.5).</p>

<h4 id="windownavigatoronline"><code>window.navigator.onLine</code></h4>

<p>Not strictly mobile, but helpful for apps to determine if they’re being run offline.</p>

<h4 id="windownavigatorstandalone"><code>window.navigator.standalone</code></h4>

<p>(iOS 2.1+): determine if it’s running in full-screen mode</p>

<h4 id="touch-and-gesture-events">Touch and gesture events</h4>

<ul>
  <li>
    <p><a href="http://developer.apple.com/safari/library/documentation/appleapplications/reference/safariwebcontent/handlingevents/handlingevents.html">touch events (iOS, Android 2.2+)</a>: touchstart, touchmove, touchend, touchcancel</p>
  </li>
  <li>
    <p><a href="http://developer.apple.com/safari/library/documentation/internetweb/conceptual/safarivisualeffectsprogguide/InteractiveVisualEffects/InteractiveVisualEffects.html">gesture events (Apple only, iOS 2+)</a>: gesturestart, gesturechange, gesturend give access to predefined gestures (rotation, scale, position)</p>
  </li>
</ul>

<h4 id="screen-orientation-every-90-degrees">Screen orientation (every 90 degrees)</h4>

<ul>
  <li><a href="http://ajaxian.com/archives/iphone-windowonorientationchange-code">orientationchange event</a>: triggered every 90 degrees of rotation (portrait and landscape modes). The current orientation is available through window.orientation</li>
</ul>

<h4 id="device-orientation-more-fine-grained">Device orientation (more fine-grained)</h4>

<p>The <a href="http://frontendstuff.com/javascript/examples/deviceorientation.html">deviceorientation event</a> will fire very frequently, and gives more fine-grained information about the device’s orientation in three dimensions.  <br />
<a href="https://developer.mozilla.org/en/Detecting_device_orientation">MozOrientation</a> (or onmozorientation?) (Fennec/Firefox Mobile, Firefox 3.5+): also not strictly mobile. Gives access to the device’s accelerometer (x-y-z orientation data), updated periodically. Works on Android phones running Mobile Firefox. On the desktop this works with laptops such as Thinkpads and MacBooks.</p>

<h4 id="devicemotion-shake-gestures-etc">devicemotion (shake gestures, etc.)</h4>

<ul>
  <li><a href="http://frontendstuff.com/javascript/examples/devicemotion.html">devicemotion</a> fires when the user shakes or moves their device. Devicemotion taps into the accelerometer, which is fires off when the device accelerates. Contrast this with the deviceorientation event, which taps into the device’s gyroscope (if it has one), which only measures the 3D angle orientation, even when the device is at rest.</li>
</ul>

<h4 id="media-capture-api">Media capture API</h4>

<p>While iOS is still lacking basic file inputs, Android is forging ahead, giving developers fine-grained control over content users can upload.</p>

<pre><code class="language-html">    &lt;!-- regular file upload (Android 2.2+, NO iOS) --&gt;
    &lt;input type="file"&gt;&lt;/input&gt;

    &lt;!-- opens directly to the camera (Android 3.0+) --&gt;
    &lt;input type="file" accept="image/*;capture=camera"&gt;&lt;/input&gt;

    &lt;!-- opens directly to the camera in video mode (Android 3.0+) --&gt;
    &lt;input type="file" accept="video/*;capture=camcorder"&gt;&lt;/input&gt;

    &lt;!-- opens directly to the audio recorder (Android 3.0+) --&gt;
    &lt;input type="file" accept="audio/*;capture=microphone"&gt;&lt;/input&gt;
</code></pre>

<h4 id="blackberry-specific">BlackBerry specific</h4>

<p>If you’re developing for a BlackBerry Widget, you have access to proprietary information through the <a href="http://www.blackberry.com/developers/docs/widgetapi/Summary_system.html">blackberry object</a> (which gives access to useful information such as blackberry.network [returns values such as CDMA and Wi-Fi] and blackberry.system).</p>

<p>You also have the option to use <a href="http://phonegap.com/">PhoneGap</a>, which augments JavaScript and gives you access to more phone features that native apps would have access to.</p>

<h3 id="use-a-mobile-optimized-javascript-library">Use a mobile-optimized JavaScript library</h3>

<p>I’ve created <a href="http://davidbcalhoun.com/2010/mobile-javascript-libraries-and-frameworks">a separate entry for the available mobile libraries and frameworks</a>.</p>

<p>Because smartphone browsers are standards-based, the aim of a JavaScript library on mobile is less towards API normalization and more towards providing an actual UI framework, usually to emulate the feel of native apps (and to provide easier workarounds to <a href="http://doctyper.com/archives/200808/fixed-positioning-on-mobile-safari/">lack of access to position:fixed</a>). We’ve seen a few libraries released that emulate the iPhone UI, and in the future we might see libraries emulating the Android UI, as well as entirely new UIs.</p>

<p>There’s also a bit to be said about simply loading full desktop JavaScript libraries into mobile clients. In my opinion this doesn’t particularly make sense, especially in a world where latency and bandwidth are so much more of a concern. It doesn’t make sense to force the user wait longer and download code that’s ultimately useless to them (hacks for desktop browsers such as IE 6, etc).</p>

<h3 id="take-advantage-of-new-stuff">Take advantage of new stuff!</h3>

<p>While not specific to mobile, there’s a lot of new stuff in general that you can use. If you limit yourself to the top smartphones (iPhone, Android, and maybe webOS), compared to the desktop you immediately have access to an even wider array of new stuff, especially many Webkit proprietary features, since most of these top smartphones have browsers based on Webkit.</p>

<p>-HTML: new tags (<a href="http://diveintohtml5.org/">HTML5</a> (I’m sure you’ve heard of it by now…))  <br />
-CSS: <a href="http://webkit.org/blog/130/css-transforms/">2d transforms</a>, <a href="http://webkit.org/blog/386/3d-transforms/">3d transforms</a>, animation, <a href="http://border-radius.com/">border radius</a>, <a href="https://developer.mozilla.org/en/css/@font-face">custom fonts with @font-face</a>, etc.  <br />
-JavaScript: <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/">strict mode</a>, <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Constants">constants</a>, <a href="http://davidbcalhoun.com/2009/javascript-tidbit-block-scope-with-let">block scope</a>, <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Date">Date.now()</a>, etc.</p>

<h3 id="slides">Slides</h3>

<iframe src="http://www.slideshare.net/franksvalli/slideshelf" width="615px" height="470px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:none;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe>

<div style="width:425px" id="__ss_7424222">
    <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/franksvalli/mobile-html-css-and-javascript" title="Mobile HTML, CSS, and JavaScript">Mobile HTML, CSS, and JavaScript</a></strong> <div style="padding:5px 0 12px">
    View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/franksvalli">franksvalli</a>
    </div>
</div>

<h3 id="more-from-the-mobile-web-series">More from the Mobile Web series:</h3>

<p><a href="http://davidbcalhoun.com/2010/viewport-metatag">Part 1: The viewport metatag</a>  <br />
<a href="http://davidbcalhoun.com/2010/the-mobile-developers-toolkit-mobile-web-part-2">Part 2: The mobile developer’s toolkit</a>  <br />
<a href="http://davidbcalhoun.com/2010/designing-buttons-that-dont-suck">Part 3: Designing buttons that don’t suck</a>  <br />
<a href="http://davidbcalhoun.com/2010/on-designing-a-mobile-webpage">Part 4: On designing a mobile webpage</a>  <br />
<a href="http://davidbcalhoun.com/2010/using-mobile-specific-html-css-javascript">Part 5: Using mobile-specific HTML, CSS, and JavaScript</a>  <br />
<a href="http://davidbcalhoun.com/2010/dealing-with-device-orientation">Part 6: Dealing with device orientation</a>  <br />
<a href="http://davidbcalhoun.com/2010/mobile-javascript-libraries-and-frameworks">Part 7: Mobile JavaScript libraries and frameworks</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The viewport metatag (Mobile web part 1)]]></title>
    <link href="http://davidbcalhoun.com/2010/viewport-metatag"/>
    <updated>2010-05-06T00:00:00-07:00</updated>
    <id>http://davidbcalhoun.com/2010/viewport-metatag</id>
    <content type="html"><![CDATA[<h3 id="the-skinny">The skinny</h3>

<p>Use this:</p>

<pre><code class="language-html">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"/&gt;
</code></pre>

<h3 id="introduction">Introduction</h3>

<p>This series of posts is intended to introduce web developers to basic techniques for designing for the mobile web. It assumes at least a basic knowledge of creating desktop websites.</p>

<h3 id="the-problem">The problem</h3>

<p>Ok, so you’ve settled down to learn how to write a website for a mobile device using your current knowledge of building desktop websites. So you start off with some pretty basic HTML:</p>

<pre lang="html"><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Hello world!&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;Hello world!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Ok! You can’t get much simpler than that. You check it out and it looks good on all the desktop browsers, since there’s really no opportunity yet for any cross-browser inconsistencies. And then you check it out on your mobile device:</p>

<p><figure itemprop='image' itemscope itemtype='http://schema.org/ImageObject' class='center'><meta itemprop='width' content='320'><meta itemprop='height' content='480'><meta itemprop='url' content='http://davidbcalhoun.com/wp-content/uploads/2010/05/hello-world-iphone.png'><img itemprop='contentUrl' src="http://davidbcalhoun.com/wp-content/uploads/2010/05/hello-world-iphone.png" width="320" height="480" title="Hello World on the iPhone, WITHOUT the viewport metatag" ><figcaption itemprop='caption'>Hello World on the iPhone, WITHOUT the viewport metatag</figcaption></figure></p>

<p>Doh! Where’d we go wrong? The text is obviously way too small to read without zooming in.</p>

<p>This is the first lesson in making mobile websites: width is your enemy. This is the first of many countless problems with device width you will encounter. Fair warning.</p>

<p>If you think about it logically, it seems to make sense: mobile Safari took a look at the page and assumed it was a document designed for the desktop, which is true of the vast majority of websites. So it gave the website a width of 980 pixels and presented it zoomed out. Which is why we can’t read anything until we zoom into the page.</p>

<h3 id="viewport">Viewport</h3>

<p>But this is no good! What we need to do is tell the browser that this webpage is optimized for mobile. And this is where the viewport metatag comes into the picture.</p>

<p>Now we tweak our Hello World just a bit…</p>

<pre><code class="language-html">    &lt;!doctype html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world!&lt;/title&gt;

        &lt;meta name="viewport" content="width=device-width"/&gt;
    &lt;/head&gt;

    &lt;body&gt;
    &lt;p&gt;Hello world!&lt;/p&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<p>And we get this…</p>

<p><figure itemprop='image' itemscope itemtype='http://schema.org/ImageObject' class='center'><meta itemprop='width' content='320'><meta itemprop='height' content='480'><meta itemprop='url' content='http://davidbcalhoun.com/wp-content/uploads/2010/05/hello-world-viewport-iphone.png'><img itemprop='contentUrl' src="http://davidbcalhoun.com/wp-content/uploads/2010/05/hello-world-viewport-iphone.png" width="320" height="480" title="Hello World with the Viewport tag" ><figcaption itemprop='caption'>Hello World with the Viewport tag</figcaption></figure></p>

<p>Much better! By setting the viewport width equal to “device-width”, we’re essentially telling it that the device width is 320px, not the default value of 980px that it guessed. If we set width=320 it would achieve the same result on the iPhone and a few other smartphones, but not all phones have this exact width, so it’s best to simply set device-width and let the mobile browser figure it out.</p>

<p>This viewport metatag is supported on many smartphones, from iPhone to Android to webOS (Palm) to even Internet Explorer Mobile, Opera Mini and Opera Mobile.</p>

<p>At the end of the day here’s what the standard viewport looks like, as grabbed from <a href="http://m.yahoo.com">m.yahoo.com</a>:</p>

<pre><code class="language-html">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/&gt;
</code></pre>

<p>EDIT: It’s been discussed a bit, and it seems that preventing the user from scaling the page (pinch zooming) isn’t necessarily desirable. So here’s a version of the tag that allows the user to pinch zoom:</p>

<pre><code class="language-html">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"/&gt;
</code></pre>

<h3 id="more-fun-with-the-viewport-tag">More fun with the viewport tag</h3>

<p>In addition to solving our biggest concern with the width of the content, the viewport tag has more options to play with:</p>

<table class="datatable-medium">
  <tr>
    <td>
      Property
    </td>
    
    <td>
      Description
    </td>
  </tr>
  
  <tr>
    <td>
      width
    </td>
    
    <td>
      Width of the viewport in pixels (or device-width). If width isn't set, it defaults to a desktop size (980px on mobile Safari).
    </td>
  </tr>
  
  <tr>
    <td>
      height
    </td>
    
    <td>
      Height of the viewport in pixels (or device-height). Generally you don't need to worry about setting this property.
    </td>
  </tr>
  
  <tr>
    <td>
      initial-scale
    </td>
    
    <td>
      (0 to 10.0) Multiplier that sets the scale of the page after its initial display. Safe bet: if you need to set it, set it to 1.0. Larger values = zoomed in, smaller values = zoomed out
    </td>
  </tr>
  
  <tr>
    <td>
      minimum-scale
    </td>
    
    <td>
      (0 to 10.0) The minimum multiplier the user can "zoom out" to. Defaults to 0.25 on mobile Safari.
    </td>
  </tr>
  
  <tr>
    <td>
      maximum-scale
    </td>
    
    <td>
      (0 to 10.0) The minimum multiplier the user can "zoom in" to. Defaults to 1.6 on mobile Safari.
    </td>
  </tr>
  
  <tr>
    <td>
      user-scalable
    </td>
    
    <td>
      (yes/no) Whether to allow a user from scaling in/out (zooming in/out). Default to "yes" on mobile Safari.
    </td>
  </tr>
</table>

<h3 id="feature-phones-when-viewport-isnt-available">Feature phones: when viewport isn’t available…</h3>

<p>Note: this info is now very outdated and is preserved here just for historical reference.  In general, you can ignore this stuff these days.</p>

<p>Unfortunately the viewport tag is relatively new and as such isn’t universally supported, especially if you’re working on older feature phones. But there are some older methods at your disposal for identifying your website as optimized for mobile:</p>

<pre><code class="language-html">    &lt;meta name="HandheldFriendly" content="true"/&gt;
</code></pre>

<p>This tag was originally used to identify mobile content in AvantGo browsers, but has now been made the general standard for identifying mobile websites. However, it’s unknown what range of browsers support this meta tag.</p>

<p>Another tag at your disposal is a Windows-proprietary meta tag that also took root and eventually became used as another means of identifying mobile content. The drawback with this tag is that a specific width must be given, which doesn’t make it as flexible as the viewport tag (see above). Again, it’s unknown what the support for this tag is:</p>

<pre><code class="language-html">    &lt;meta name="MobileOptimized" content="320"/&gt;
</code></pre>

<p>Lastly, your website will be identified as a mobile optimized site if your doctype is either XHTML-MP or WML. However, this is becoming less and less the case these days, as browsers begin to support good old HTML4.01 and HTML5+.</p>

<p>(info for this section comes from <a href="http://www.amazon.com/gp/product/B003U890OQ/ref=pd_lpo_k2_dp_sr_1?pf_rd_p=486539851&#038;pf_rd_s=lpo-top-stripe-1&#038;pf_rd_t=201&#038;pf_rd_i=143022620X&#038;pf_rd_m=ATVPDKIKX0DER&#038;pf_rd_r=017307F07YKBPJX46DXB">Beginning Smartphone Web Development</a>)</p>

<h3 id="custom-android-properties">Custom Android properties</h3>

<p><a href="http://developer.android.com/reference/android/webkit/WebView.html">The official Android documentation</a> lists a special property they’ve added to the meta tag: target-densitydpi. This property essentially allows developers to specify which screen resolution the page has been developed for, or more specifically how to handle the scaling of media such as images.</p>

<p>Here’s an example of the tag in action:</p>

<pre><code class="language-html">    &lt;meta name="viewport" content="target-densitydpi=device-dpi" /&gt;
</code></pre>

<h3 id="references">References</h3>

<p><a href="http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html">Safari HTML Reference: Supported Meta Tags</a>  <br />
<a href="http://learnthemobileweb.com/tag/mobile-web-development/page/3/">Mobile META Tags</a></p>

<h3 id="more-from-the-mobile-web-series">More from the Mobile Web series:</h3>
<ul>
  <li><a href="http://davidbcalhoun.com/2010/viewport-metatag">Part 1: The viewport metatag</a></li>
  <li><a href="http://davidbcalhoun.com/2010/the-mobile-developers-toolkit-mobile-web-part-2">Part 2: The mobile developer’s toolkit</a></li>
  <li><a href="http://davidbcalhoun.com/2010/designing-buttons-that-dont-suck">Part 3: Designing buttons that don’t suck</a></li>
  <li><a href="http://davidbcalhoun.com/2010/on-designing-a-mobile-webpage">Part 4: On designing a mobile webpage</a></li>
  <li><a href="http://davidbcalhoun.com/2010/using-mobile-specific-html-css-javascript">Part 5: Using mobile-specific HTML, CSS, and JavaScript</a></li>
  <li><a href="http://davidbcalhoun.com/2010/dealing-with-device-orientation">Part 6: Dealing with device orientation</a></li>
  <li><a href="http://davidbcalhoun.com/2010/mobile-javascript-libraries-and-frameworks">Part 7: Mobile JavaScript libraries and frameworks</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
