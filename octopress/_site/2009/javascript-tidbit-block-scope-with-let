<p>JavaScript has <strong>functional scope</strong>. Meaning that if you (properly) define variables within functions, those variables remain accessible only inside the function.</p>

<p><strong>Block scope</strong>, on the other hand, defines scope within a block of code, usually defined by braces. JavaScript now has block scope as of version 1.7, which means it&#8217;s available in these browsers:</p>

<ul>
<li>Firefox 2+</li>
</ul>

<p>Block scope is enabled in JavaScript with the use of &#8220;let&#8221;:</p>
<pre class='JScript' name='code'>let(x=100) {
    alert(x);
};</pre>
<p>It also works perfectly well on one line, without the use of braces:</p>
<pre class='JScript' name='code'>let(x=100) alert(x);</pre>
<p>Note that we can define global variables with the same name outside the block scope and the variables won&#8217;t interfere with each other:</p>
<pre class='JScript' name='code'>x = 200;
let(x=100) alert(x);
alert(x);
// result: 100, 200
</pre>
<p>Note that there&#8217;s a slight caveat &#8211; not only is this not available in any version of IE, but it also requires a special script type declaration in order to work (at least for Firefox): <strong>type=&#8221;text/javascript;version=1.7&#8243;</strong></p>

<p>References:<br /><a href='http://en.wikipedia.org/wiki/JavaScript#Versions'>JavaScript Versions</a><br /><a href='http://www.youtube.com/watch?v=0LKDImgRfrg#t=32m2s'>Video: Best Practices in Javascript Library Design (John Resig)</a><br /><a href='https://developer.mozilla.org/en/New_in_JavaScript_1.7'>New in JavaScript 1.7</a></p>