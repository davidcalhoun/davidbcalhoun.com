<p>&#8230;</p>

<h3 id='functions'>Functions</h3>

<h4 id='parenthesis_and_function_execution'>Parenthesis and function execution</h4>

<p>Parenthesis kick off the execution of a function:</p>
<pre class='JScript' name='code'>function foo() {
	return true;
}

typeof foo;    // "function"
typeof foo();  // "boolean"
</pre>
<p>Both of these are related to the function we just defined, but notice that a function reference without parenthesis is simply a pointer to the function and nothing more. The function with parenthesis executes our function and returns a result (true, which is of type &#8220;boolean&#8221;). We can assign these to variables:</p>
<pre class='JScript' name='code'>var myFunction = foo;  // store the function pointer
var myResult = foo();  // store the result of executing the function

typeof myFunction;     // "function"
typeof myResult;       // "boolean"
</pre>
<h4 id='passing_parameters'>Passing parameters</h4>

<p>-params<br />-passing objects</p>

<h4 id='selfexecuting_anonymous_functions'>Self-executing anonymous functions</h4>

<p>A self-executing anonymous function is an unnamed function that&#8217;s simply executed immediately after being defined. Here&#8217;s an example:</p>
<pre class='JScript' name='code'>(function(){})();
</pre>
<p>Just as above, we can pass in parameters:</p>
<pre class='JScript' name='code'>(function(param){
	param;  // "foo"
})('foo');
</pre>
<p>Why on earth would you want to use this? As it turns out, this is a nice way to sandbox your code and is preferred to simply declaring code out in the open. Have a look at the difference:</p>
<pre class='JScript' name='code'>// Old way (antipattern!)
var foo = 'bar';
console.log(foo);

// New way (sandboxed)
(function(){
	var foo = 'bar';
	console.log(foo);
})();
</pre>
<p>These two methods run the same code and achieve the same end, but the second example is sandboxed because we say it has &#8220;functional scope&#8221; and not &#8220;global scope&#8221;.</p>

<h4 id='scope'>Scope</h4>

<h4 id='function_declaration_vs_function_literal'>Function declaration vs. function literal</h4>

<h4 id='function_hoisting'>Function hoisting</h4>

<h4 id='the_dom'>The DOM</h4>

<p>&#8230;</p>