<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on David Calhoun&#39;s blog</title>
    <link>https://www.davidbcalhoun.com/categories/php/</link>
    <description>Recent content in Php on David Calhoun&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 01 Dec 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.davidbcalhoun.com/categories/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP: dealing with stuff that doesn&#39;t exist</title>
      <link>https://www.davidbcalhoun.com/2009/php-dealing-with-stuff-that-doesnt-exist/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/php-dealing-with-stuff-that-doesnt-exist/</guid>
      <description>&lt;h2 id=&#34;-warning-this-is-an-old-article-and-may-include-information-thats-out-of-date-&#34;&gt;⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️&lt;/h2&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;As the application you’re coding becomes more and more complex, there’s more of an opportunity for things to go wrong in all sorts of unforseen ways.  One of these problems is variables or functions that don’t exist.  The problem is when you code in such a way that you presuppose their existence. But their existence isn’t guaranteed!&lt;/p&gt;</description>
    </item>
    <item>
      <title>PHP Tidbit: Dead simple singleton</title>
      <link>https://www.davidbcalhoun.com/2009/php-tidbit-dead-simple-singleton/</link>
      <pubDate>Mon, 14 Sep 2009 00:00:00 +0000</pubDate>
      <guid>https://www.davidbcalhoun.com/2009/php-tidbit-dead-simple-singleton/</guid>
      <description>&lt;pre name=&#34;code&#34; class=&#34;php&#34;&gt;class Singleton {&#xD;&#xA;    private static $instance;&#xD;&#xA;    public static function getInstance() {&#xD;&#xA;        if(!isset(self::$instance)) {&#xD;&#xA;            $c = __CLASS__;&#xD;&#xA;            self::$instance = new $c();&#xD;&#xA;        }&#xD;&#xA;        return self::$instance;&#xD;&#xA;    }&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;And the explanation…&lt;/p&gt;&#xA;&lt;pre name=&#34;code&#34; class=&#34;php&#34;&gt;class Singleton {&#xD;&#xA;    private static $instance;               // static variable to hold our 1 instance&#xD;&#xA;&#xD;&#xA;    public static function getInstance() {  // function to get the 1 instance&#xD;&#xA;        if(!isset(self::$instance)) {       // this will only run once (and instantiate once)&#xD;&#xA;            $c = __CLASS__;                 // get the class (Singleton)&#xD;&#xA;            self::$instance = new $c();     // instantiate the class and store it in our variable&#xD;&#xA;        }&#xD;&#xA;        return self::$instance;             // return the instance&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    public static function myFunction() {   // we can get to this through Singleton::getInstance()-&gt;myFunction()&#xD;&#xA;        // ...&#xD;&#xA;    }&#xD;&#xA;}&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
