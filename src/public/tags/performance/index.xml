<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on David Calhoun&#39;s blog</title>
    <link>https://www.davidbcalhoun.com/tags/performance/</link>
    <description>Recent content in performance on David Calhoun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 14 Oct 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://www.davidbcalhoun.com/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS5 SunSpider: iPhone 4S vs iPhone 4 vs iPhone 3GS</title>
      <link>https://www.davidbcalhoun.com/2011/ios5-sunspider-iphone-4s-vs-iphone-4-vs-iphone-3gs/</link>
      <pubDate>Fri, 14 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2011/ios5-sunspider-iphone-4s-vs-iphone-4-vs-iphone-3gs/</guid>
      <description>Result table (SunSpider 0.9.1, all devices running iOS 5)   Test  &amp;lt;td&amp;gt; iPhone 4S &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; iPhone 4 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; iPhone 3GS &amp;lt;/td&amp;gt;     Total  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 2270ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 3483ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 4903ms &amp;lt;/td&amp;gt;     3D  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 281ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 486ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 672ms &amp;lt;/td&amp;gt;     Access  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 279ms &amp;lt;/td&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 410ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 614ms &amp;lt;/td&amp;gt;     Bitops  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 177ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 200ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 270ms &amp;lt;/td&amp;gt;     Controlflow  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 20ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 26ms &amp;lt;/td&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 34ms &amp;lt;/td&amp;gt;     Crypto  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 164ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 211ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 315ms &amp;lt;/td&amp;gt;     Date  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 332ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 528ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 770ms &amp;lt;/td&amp;gt;     Math  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 219ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 433ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 553ms &amp;lt;/td&amp;gt;     Regexp  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 88ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 117ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 151ms &amp;lt;/td&amp;gt;     String  &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 711ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1072ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1525ms &amp;lt;/td&amp;gt;    Raw results iPhone 4S (iOS5)</description>
    </item>
    
    <item>
      <title>Mobile Performance Manifesto</title>
      <link>https://www.davidbcalhoun.com/2011/mobile-performance-manifesto/</link>
      <pubDate>Tue, 11 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2011/mobile-performance-manifesto/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ Earlier this year I gave a talk (slides) outlining the latest and greatest in mobile performance, including a bit of my own unscientific research into carrier latency and bandwidth thanks to boomerang.js.
I realized that interest in mobile performance has exploded recently, especially with Steve Souders announcing his focus on mobile, and I thought it was time for an update, this time in blog form.</description>
    </item>
    
    <item>
      <title>When to base64 encode images (and when not to)</title>
      <link>https://www.davidbcalhoun.com/2011/when-to-base64-encode-images-and-when-not-to/</link>
      <pubDate>Sun, 28 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2011/when-to-base64-encode-images-and-when-not-to/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ Introduction Ever since Steve Souders started evangelizing web performance, it&amp;rsquo;s been pounded into our heads that extra HTTP requests add a lot of additional overhead, and that we should combine them if possible to dramatically decrease the load time of our web pages.
The practical implication of this has been to combine our JavaScript and CSS files, which is relatively easy and straightforward, but the harder question has been what to do with images.</description>
    </item>
    
    <item>
      <title>JavaScript SunSpider benchmark: iOS 4.3 vs iOS 4.0</title>
      <link>https://www.davidbcalhoun.com/2011/javascript-sunspider-benchmark-ios-4.3-vs-ios-4.0/</link>
      <pubDate>Sat, 22 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2011/javascript-sunspider-benchmark-ios-4.3-vs-ios-4.0/</guid>
      <description>Result table (SunSpider 0.9.1)    Test  &amp;lt;td&amp;gt; iOS 4 (3GS) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; iOS 4.3 beta 2 (3GS) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; % change &amp;lt;/td&amp;gt;     Total  &amp;lt;td&amp;gt; 13787ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 5357ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; -61.1% &amp;lt;/td&amp;gt;     3D  &amp;lt;td&amp;gt; 1917ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 737ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; -61.6% &amp;lt;/td&amp;gt;     Access  &amp;lt;td&amp;gt; 1893ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; 617ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; -67.</description>
    </item>
    
    <item>
      <title>BlackBerry Torch SunSpider results (JavaScript benchmark)</title>
      <link>https://www.davidbcalhoun.com/2010/blackberry-torch-sunspider-results-javascript-benchmark/</link>
      <pubDate>Wed, 18 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/blackberry-torch-sunspider-results-javascript-benchmark/</guid>
      <description>Results ============================================RESULTS (means and 95% confidence intervals)--------------------------------------------Total: 322.2ms +/- 4.9%--------------------------------------------3d: 55.0ms +/- 15.3%cube: 19.8ms +/- 12.1%morph: 16.6ms +/- 35.8%raytrace: 18.6ms +/- 22.5%access: 32.8ms +/- 12.4%binary-trees: 1.8ms +/- 30.9%fannkuch: 14.2ms +/- 7.3%nbody: 12.6ms +/- 26.7%nsieve: 4.2ms +/- 24.8%bitops: 29.4ms +/- 10.2%3bit-bits-in-byte: 2.4ms +/- 28.4%bits-in-byte: 8.0ms +/- 15.5%bitwise-and: 8.6ms +/- 21.9%nsieve-bits: 10.4ms +/- 21.7%controlflow: 2.</description>
    </item>
    
    <item>
      <title>Is a hash faster than a Switch in JavaScript?</title>
      <link>https://www.davidbcalhoun.com/2010/is-a-hash-faster-than-a-switch-in-javascript/</link>
      <pubDate>Tue, 17 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/is-a-hash-faster-than-a-switch-in-javascript/</guid>
      <description>⚠️ Warning: this is an old article and may include information that&amp;rsquo;s out of date. ⚠️ I stumbled across this concept recently and I thought I&amp;rsquo;d share it, because I don&amp;rsquo;t generally see this pattern being used. More importantly, I also share test results that show that maybe it&amp;rsquo;s not always a good idea to use this pattern&amp;hellip;
The problem with Switch statements The basic switch statement in JavaScript looks something like this:</description>
    </item>
    
    <item>
      <title>iPhone 4 SunSpider test results (22% faster than iPhone 3GS)</title>
      <link>https://www.davidbcalhoun.com/2010/iphone-4-sunspider-test-results-22-faster-than-iphone-3gs/</link>
      <pubDate>Fri, 25 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/iphone-4-sunspider-test-results-22-faster-than-iphone-3gs/</guid>
      <description>============================================RESULTS (means and 95% confidence intervals)--------------------------------------------Total: 10669.4ms +/- 1.0%--------------------------------------------3d: 1471.5ms +/- 2.1%cube: 428.7ms +/- 2.6%morph: 584.3ms +/- 4.7%raytrace: 458.5ms +/- 0.6%access: 1476.7ms +/- 1.3%binary-trees: 151.6ms +/- 1.3%fannkuch: 664.0ms +/- 0.1%nbody: 397.9ms +/- 2.1%nsieve: 263.2ms +/- 6.3%bitops: 947.2ms +/- 2.1%3bit-bits-in-byte: 195.7ms +/- 2.0%bits-in-byte: 206.1ms +/- 1.0%bitwise-and: 179.7ms +/- 1.1%nsieve-bits: 365.7ms +/- 3.9%controlflow: 169.</description>
    </item>
    
    <item>
      <title>JavaScript SunSpider test: iOS 3.1.3 versus iOS 4 GM</title>
      <link>https://www.davidbcalhoun.com/2010/javascript-sunspider-test-ios-3.1.3-versus-ios-4-gm/</link>
      <pubDate>Thu, 10 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2010/javascript-sunspider-test-ios-3.1.3-versus-ios-4-gm/</guid>
      <description>Result table    Test  &amp;lt;td&amp;gt; iOS 3.1.3 (3GS) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; iOS 4 GM (3GS) &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; % change &amp;lt;/td&amp;gt;     Total  &amp;lt;td&amp;gt; 15396ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 13787ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; -10.5% &amp;lt;/td&amp;gt;     3D  &amp;lt;td&amp;gt; 2411ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1917ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;positive&amp;quot;&amp;gt; -20.5% &amp;lt;/td&amp;gt;     Access  &amp;lt;td&amp;gt; 1884ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1893ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;negative&amp;quot;&amp;gt; +0.5% &amp;lt;/td&amp;gt;     Bitops  &amp;lt;td&amp;gt; 1044ms &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; 1239ms &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;negative&amp;quot;&amp;gt; +18.</description>
    </item>
    
    <item>
      <title>Video: John Resig - Testing, Performance Analysis, and jQuery 1.4</title>
      <link>https://www.davidbcalhoun.com/2009/video-john-resig-testing-performance-analysis-and-jquery-1.4/</link>
      <pubDate>Mon, 21 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.davidbcalhoun.com/2009/video-john-resig-testing-performance-analysis-and-jquery-1.4/</guid>
      <description>In case you hadn’t seen it yet, John Resig was kind enough to stop by Yahoo! for the December Bayjax meetup. Here’s the video:
 Usually developers are more interested in just getting the dang code to work, and as a result actual the testing and maintenance of JavaScript isn’t talked about too much, so I’m sure this will be new territory for many developers. And since it’s John Resig speaking, there was of course a bit about using TestSwarm, a testing distributed framework-agnostic automated testing tool (that’s a mouthful!</description>
    </item>
    
  </channel>
</rss>
